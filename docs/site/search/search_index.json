{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"alfred Index Auto-generated documentation index. A full list of alfred project modules. Alfred Client Cache Cache Dummy Sqlite Client Ssh SSHTunnel Utils Data Arrow Dataset Wrench Fm Dummy Huggingface Model Openai Query CompletionQuery Query RankedQuery Remote Grpc Protos Query Pb2 Query Pb2 Grpc Utils Response CompletionResponse RankedResponse Response Utils Run Client Api Run Server Template StringTemplate Template","title":"alfred Index"},{"location":"#alfred-index","text":"Auto-generated documentation index. A full list of alfred project modules. Alfred Client Cache Cache Dummy Sqlite Client Ssh SSHTunnel Utils Data Arrow Dataset Wrench Fm Dummy Huggingface Model Openai Query CompletionQuery Query RankedQuery Remote Grpc Protos Query Pb2 Query Pb2 Grpc Utils Response CompletionResponse RankedResponse Response Utils Run Client Api Run Server Template StringTemplate Template","title":"alfred Index"},{"location":"alfred/","text":"Alfred alfred Index / Alfred Auto-generated documentation for alfred module. Alfred Modules Modules Client Data Fm Run Client Api Run Server Template","title":"Alfred"},{"location":"alfred/#alfred","text":"alfred Index / Alfred Auto-generated documentation for alfred module. Alfred Modules","title":"Alfred"},{"location":"alfred/#modules","text":"Client Data Fm Run Client Api Run Server Template","title":"Modules"},{"location":"alfred/run_client_api/","text":"Run Client Api alfred Index / Alfred / Run Client Api Auto-generated documentation for alfred.run_client_api module. Run Client Api ALFRED_CONFIG alfred_server_completion get_alfred_server_end_point get_alfred_server_final_host get_alfred_server_model get_alfred_server_model_type get_alfred_server_port get_alfred_server_username get_alfred_server_webhook_port main root set_alfred_server_connected set_alfred_server_connected set_alfred_server_end_point set_alfred_server_endpoint_cfg set_alfred_server_final_host set_alfred_server_model set_alfred_server_model_type set_alfred_server_port set_alfred_server_username set_alfred_server_webhook_port status ALFRED_CONFIG Show source in run_client_api.py:27 Signature class ALFRED_CONFIG ( BaseModel ): ... alfred_server_completion Show source in run_client_api.py:215 Signature @alfred_app . post ( \"/alfred_server/completion\" ) async def alfred_server_completion ( request : Request ): ... get_alfred_server_end_point Show source in run_client_api.py:62 Signature @alfred_app . get ( \"/alfred_server/end_point\" ) async def get_alfred_server_end_point (): ... get_alfred_server_final_host Show source in run_client_api.py:72 Signature @alfred_app . get ( \"/alfred_server/final_host\" ) async def get_alfred_server_final_host (): ... get_alfred_server_model Show source in run_client_api.py:52 Signature @alfred_app . get ( \"/alfred_server/model\" ) async def get_alfred_server_model (): ... get_alfred_server_model_type Show source in run_client_api.py:57 Signature @alfred_app . get ( \"/alfred_server/model_type\" ) async def get_alfred_server_model_type (): ... get_alfred_server_port Show source in run_client_api.py:47 Signature @alfred_app . get ( \"/alfred_server/port\" ) async def get_alfred_server_port (): ... get_alfred_server_username Show source in run_client_api.py:67 Signature @alfred_app . get ( \"/alfred_server/username\" ) async def get_alfred_server_username (): ... get_alfred_server_webhook_port Show source in run_client_api.py:77 Signature @alfred_app . get ( \"/alfred_server/webhook_port\" ) async def get_alfred_server_webhook_port (): ... main Show source in run_client_api.py:240 Signature def main ( args ): ... root Show source in run_client_api.py:36 Signature @alfred_app . get ( \"/\" ) async def root (): ... set_alfred_server_connected Show source in run_client_api.py:82 Signature @alfred_app . get ( \"/alfred_server/connected\" ) async def set_alfred_server_connected (): ... set_alfred_server_connected Show source in run_client_api.py:227 Signature @alfred_app . get ( \"/alfred_server/cache\" ) async def set_alfred_server_connected (): ... set_alfred_server_end_point Show source in run_client_api.py:110 Signature @alfred_app . post ( \"/alfred_server/end_point\" ) async def set_alfred_server_end_point ( request : Request ): ... set_alfred_server_endpoint_cfg Show source in run_client_api.py:143 Signature @alfred_app . post ( \"/alfred_server/endpoint_cfg\" ) async def set_alfred_server_endpoint_cfg ( data : ALFRED_CONFIG ): ... See also ALFRED_CONFIG set_alfred_server_final_host Show source in run_client_api.py:124 Signature @alfred_app . post ( \"/alfred_server/final_host\" ) async def set_alfred_server_final_host ( request : Request ): ... set_alfred_server_model Show source in run_client_api.py:96 Signature @alfred_app . post ( \"/alfred_server/model\" ) async def set_alfred_server_model ( request : Request ): ... set_alfred_server_model_type Show source in run_client_api.py:103 Signature @alfred_app . post ( \"/alfred_server/model_type\" ) async def set_alfred_server_model_type ( request : Request ): ... set_alfred_server_port Show source in run_client_api.py:89 Signature @alfred_app . post ( \"/alfred_server/port\" ) async def set_alfred_server_port ( request : Request ): ... set_alfred_server_username Show source in run_client_api.py:117 Signature @alfred_app . post ( \"/alfred_server/username\" ) async def set_alfred_server_username ( request : Request ): ... set_alfred_server_webhook_port Show source in run_client_api.py:131 Signature @alfred_app . post ( \"/alfred_server/webhook_port\" ) async def set_alfred_server_webhook_port ( request : Request ): ... status Show source in run_client_api.py:41 Signature @alfred_app . get ( \"/status\" ) async def status (): ...","title":"Run Client Api"},{"location":"alfred/run_client_api/#run-client-api","text":"alfred Index / Alfred / Run Client Api Auto-generated documentation for alfred.run_client_api module. Run Client Api ALFRED_CONFIG alfred_server_completion get_alfred_server_end_point get_alfred_server_final_host get_alfred_server_model get_alfred_server_model_type get_alfred_server_port get_alfred_server_username get_alfred_server_webhook_port main root set_alfred_server_connected set_alfred_server_connected set_alfred_server_end_point set_alfred_server_endpoint_cfg set_alfred_server_final_host set_alfred_server_model set_alfred_server_model_type set_alfred_server_port set_alfred_server_username set_alfred_server_webhook_port status","title":"Run Client Api"},{"location":"alfred/run_client_api/#alfred_config","text":"Show source in run_client_api.py:27","title":"ALFRED_CONFIG"},{"location":"alfred/run_client_api/#signature","text":"class ALFRED_CONFIG ( BaseModel ): ...","title":"Signature"},{"location":"alfred/run_client_api/#alfred_server_completion","text":"Show source in run_client_api.py:215","title":"alfred_server_completion"},{"location":"alfred/run_client_api/#signature_1","text":"@alfred_app . post ( \"/alfred_server/completion\" ) async def alfred_server_completion ( request : Request ): ...","title":"Signature"},{"location":"alfred/run_client_api/#get_alfred_server_end_point","text":"Show source in run_client_api.py:62","title":"get_alfred_server_end_point"},{"location":"alfred/run_client_api/#signature_2","text":"@alfred_app . get ( \"/alfred_server/end_point\" ) async def get_alfred_server_end_point (): ...","title":"Signature"},{"location":"alfred/run_client_api/#get_alfred_server_final_host","text":"Show source in run_client_api.py:72","title":"get_alfred_server_final_host"},{"location":"alfred/run_client_api/#signature_3","text":"@alfred_app . get ( \"/alfred_server/final_host\" ) async def get_alfred_server_final_host (): ...","title":"Signature"},{"location":"alfred/run_client_api/#get_alfred_server_model","text":"Show source in run_client_api.py:52","title":"get_alfred_server_model"},{"location":"alfred/run_client_api/#signature_4","text":"@alfred_app . get ( \"/alfred_server/model\" ) async def get_alfred_server_model (): ...","title":"Signature"},{"location":"alfred/run_client_api/#get_alfred_server_model_type","text":"Show source in run_client_api.py:57","title":"get_alfred_server_model_type"},{"location":"alfred/run_client_api/#signature_5","text":"@alfred_app . get ( \"/alfred_server/model_type\" ) async def get_alfred_server_model_type (): ...","title":"Signature"},{"location":"alfred/run_client_api/#get_alfred_server_port","text":"Show source in run_client_api.py:47","title":"get_alfred_server_port"},{"location":"alfred/run_client_api/#signature_6","text":"@alfred_app . get ( \"/alfred_server/port\" ) async def get_alfred_server_port (): ...","title":"Signature"},{"location":"alfred/run_client_api/#get_alfred_server_username","text":"Show source in run_client_api.py:67","title":"get_alfred_server_username"},{"location":"alfred/run_client_api/#signature_7","text":"@alfred_app . get ( \"/alfred_server/username\" ) async def get_alfred_server_username (): ...","title":"Signature"},{"location":"alfred/run_client_api/#get_alfred_server_webhook_port","text":"Show source in run_client_api.py:77","title":"get_alfred_server_webhook_port"},{"location":"alfred/run_client_api/#signature_8","text":"@alfred_app . get ( \"/alfred_server/webhook_port\" ) async def get_alfred_server_webhook_port (): ...","title":"Signature"},{"location":"alfred/run_client_api/#main","text":"Show source in run_client_api.py:240","title":"main"},{"location":"alfred/run_client_api/#signature_9","text":"def main ( args ): ...","title":"Signature"},{"location":"alfred/run_client_api/#root","text":"Show source in run_client_api.py:36","title":"root"},{"location":"alfred/run_client_api/#signature_10","text":"@alfred_app . get ( \"/\" ) async def root (): ...","title":"Signature"},{"location":"alfred/run_client_api/#set_alfred_server_connected","text":"Show source in run_client_api.py:82","title":"set_alfred_server_connected"},{"location":"alfred/run_client_api/#signature_11","text":"@alfred_app . get ( \"/alfred_server/connected\" ) async def set_alfred_server_connected (): ...","title":"Signature"},{"location":"alfred/run_client_api/#set_alfred_server_connected_1","text":"Show source in run_client_api.py:227","title":"set_alfred_server_connected"},{"location":"alfred/run_client_api/#signature_12","text":"@alfred_app . get ( \"/alfred_server/cache\" ) async def set_alfred_server_connected (): ...","title":"Signature"},{"location":"alfred/run_client_api/#set_alfred_server_end_point","text":"Show source in run_client_api.py:110","title":"set_alfred_server_end_point"},{"location":"alfred/run_client_api/#signature_13","text":"@alfred_app . post ( \"/alfred_server/end_point\" ) async def set_alfred_server_end_point ( request : Request ): ...","title":"Signature"},{"location":"alfred/run_client_api/#set_alfred_server_endpoint_cfg","text":"Show source in run_client_api.py:143","title":"set_alfred_server_endpoint_cfg"},{"location":"alfred/run_client_api/#signature_14","text":"@alfred_app . post ( \"/alfred_server/endpoint_cfg\" ) async def set_alfred_server_endpoint_cfg ( data : ALFRED_CONFIG ): ...","title":"Signature"},{"location":"alfred/run_client_api/#see-also","text":"ALFRED_CONFIG","title":"See also"},{"location":"alfred/run_client_api/#set_alfred_server_final_host","text":"Show source in run_client_api.py:124","title":"set_alfred_server_final_host"},{"location":"alfred/run_client_api/#signature_15","text":"@alfred_app . post ( \"/alfred_server/final_host\" ) async def set_alfred_server_final_host ( request : Request ): ...","title":"Signature"},{"location":"alfred/run_client_api/#set_alfred_server_model","text":"Show source in run_client_api.py:96","title":"set_alfred_server_model"},{"location":"alfred/run_client_api/#signature_16","text":"@alfred_app . post ( \"/alfred_server/model\" ) async def set_alfred_server_model ( request : Request ): ...","title":"Signature"},{"location":"alfred/run_client_api/#set_alfred_server_model_type","text":"Show source in run_client_api.py:103","title":"set_alfred_server_model_type"},{"location":"alfred/run_client_api/#signature_17","text":"@alfred_app . post ( \"/alfred_server/model_type\" ) async def set_alfred_server_model_type ( request : Request ): ...","title":"Signature"},{"location":"alfred/run_client_api/#set_alfred_server_port","text":"Show source in run_client_api.py:89","title":"set_alfred_server_port"},{"location":"alfred/run_client_api/#signature_18","text":"@alfred_app . post ( \"/alfred_server/port\" ) async def set_alfred_server_port ( request : Request ): ...","title":"Signature"},{"location":"alfred/run_client_api/#set_alfred_server_username","text":"Show source in run_client_api.py:117","title":"set_alfred_server_username"},{"location":"alfred/run_client_api/#signature_19","text":"@alfred_app . post ( \"/alfred_server/username\" ) async def set_alfred_server_username ( request : Request ): ...","title":"Signature"},{"location":"alfred/run_client_api/#set_alfred_server_webhook_port","text":"Show source in run_client_api.py:131","title":"set_alfred_server_webhook_port"},{"location":"alfred/run_client_api/#signature_20","text":"@alfred_app . post ( \"/alfred_server/webhook_port\" ) async def set_alfred_server_webhook_port ( request : Request ): ...","title":"Signature"},{"location":"alfred/run_client_api/#status","text":"Show source in run_client_api.py:41","title":"status"},{"location":"alfred/run_client_api/#signature_21","text":"@alfred_app . get ( \"/status\" ) async def status (): ...","title":"Signature"},{"location":"alfred/run_server/","text":"Run Server alfred Index / Alfred / Run Server Auto-generated documentation for alfred.run_server module. Run Server ModelServer start_server ModelServer Show source in run_server.py:19 ModelServer is the server-side interface that wraps a certain alfred.fm class. ModelServer is used to launch the specified alfred.fm model as a gRPC Server and find the proper port. Signature class ModelServer : def __init__ ( self , model : str , model_type : str , port : int = 10719 , ** kwargs : Any ): ... start_server Show source in run_server.py:67 Wrapper function to start gRPC Server. Arguments args - arguments from command line :type args: argparse.Namespace Signature def start_server ( args : argparse . Namespace ): ...","title":"Run Server"},{"location":"alfred/run_server/#run-server","text":"alfred Index / Alfred / Run Server Auto-generated documentation for alfred.run_server module. Run Server ModelServer start_server","title":"Run Server"},{"location":"alfred/run_server/#modelserver","text":"Show source in run_server.py:19 ModelServer is the server-side interface that wraps a certain alfred.fm class. ModelServer is used to launch the specified alfred.fm model as a gRPC Server and find the proper port.","title":"ModelServer"},{"location":"alfred/run_server/#signature","text":"class ModelServer : def __init__ ( self , model : str , model_type : str , port : int = 10719 , ** kwargs : Any ): ...","title":"Signature"},{"location":"alfred/run_server/#start_server","text":"Show source in run_server.py:67 Wrapper function to start gRPC Server.","title":"start_server"},{"location":"alfred/run_server/#arguments","text":"args - arguments from command line :type args: argparse.Namespace","title":"Arguments"},{"location":"alfred/run_server/#signature_1","text":"def start_server ( args : argparse . Namespace ): ...","title":"Signature"},{"location":"alfred/client/","text":"Client alfred Index / Alfred / Client Auto-generated documentation for alfred.client module. Client Modules Modules Cache Client Ssh","title":"Client"},{"location":"alfred/client/#client","text":"alfred Index / Alfred / Client Auto-generated documentation for alfred.client module. Client Modules","title":"Client"},{"location":"alfred/client/#modules","text":"Cache Client Ssh","title":"Modules"},{"location":"alfred/client/client/","text":"Client alfred Index / Alfred / Client / Client Auto-generated documentation for alfred.client.client module. Client Client Client(). call Client().generate Client().remote_run Client().run Client().score Client Show source in client.py:18 Client is the primary user interface that wraps around foundation models. A client interface for accessing various models, such as those implemented by OpenAI, Hugging Face, etc. The client can be used to specify the model and how to access it, and can establish an SSH tunnel to a remote end point for secure access to a remote model. Signature class Client : def __init__ ( self , model : Optional [ str ] = None , model_type : Optional [ str ] = None , end_point : Optional [ str ] = None , local_path : Optional [ str ] = None , ssh_tunnel : bool = False , ssh_node : Optional [ str ] = None , cache : Optional [ Cache ] = \"SQLite\" , ** kwargs : Any ): ... Client(). call Show source in client.py:230 call () function to run the model on the queries. Equivalent to run() function. Arguments queries - The queries to run the model on. :type queries: Union[Query, str, List[Query], List[str]] kwargs - Additional keyword arguments (e.g. repetition_penalty, temperature, etc.) :type kwargs: Any Returns The response(s) from the model. Type: Union[Response, List[Response]] Signature def __call__ ( self , queries : Union [ Query , str , List [ Query ], List [ str ]], ** kwargs : Any ) -> Union [ Response , List [ Response ]]: ... Client().generate Show source in client.py:191 Wrapper function to generate the response(s) from the model. (For completion) Arguments query - The query to generate the response(s) from. :type query: Union[CompletionQuery, str, List[Union[CompletionQuery, str]]] kwargs - Additional keyword arguments (e.g. repetition_penalty, temperature, etc.) :type kwargs: Any Returns The response(s) from the model. Type: Union[Response, List[Response]] Signature def generate ( self , query : Union [ CompletionQuery , str , List [ CompletionQuery ], List [ str ]], ** kwargs : Any ) -> Union [ Response , List [ Response ]]: ... Client().remote_run Show source in client.py:170 Wrapper function for running the model on the queries thru a gRPC Server. Arguments queries - The queries to run the model on. :type queries: Union[Query, str, List[Query], List[str]] kwargs - Additional keyword arguments (e.g. repetition_penalty, temperature, etc.) :type kwargs: Any Returns The response(s) from the model. Type: Union[Response, List[Response]] Signature def remote_run ( self , queries : Union [ Query , str , List [ Query ], List [ str ]], ** kwargs : Any ) -> Union [ Response , List [ Response ]]: ... Client().run Show source in client.py:151 Run the model on the queries. Arguments queries - The queries to run the model on. :type queries: Union[Query, str, List[Query], List[str]] kwargs - Additional keyword arguments (e.g. repetition_penalty, temperature, etc.) :type kwargs: Any Returns The response(s) from the model. Type: Union[Response, List[Response]] Signature def run ( self , queries : Union [ Query , str , List [ Query ], List [ str ]], ** kwargs : Any ) -> Union [ Response , List [ Response ]]: ... Client().score Show source in client.py:207 Wrapper function to score the response(s) from the model. (For ranking) TODO: Implement Query in the below format: Query can be in form of a list of ranked query or a dictionary in form of: { \"prompt\": \"query string\", \"candidates\": [\"candidate 1\", \"candidate 2\", ...] } Arguments query - A single query object or a list of query objects :type query: Union[RankedQuery, Dict, List[RankedQuery], List[str]] kwargs - Additional keyword arguments :type kwargs: Any Returns A single response or a list of responses Type: Union[Response, List[Response]] Signature def score ( self , query : Union [ RankedQuery , Dict , List [ RankedQuery ], List [ str ]], ** kwargs : Any ) -> Union [ Response , List [ Response ]]: ...","title":"Client"},{"location":"alfred/client/client/#client","text":"alfred Index / Alfred / Client / Client Auto-generated documentation for alfred.client.client module. Client Client Client(). call Client().generate Client().remote_run Client().run Client().score","title":"Client"},{"location":"alfred/client/client/#client_1","text":"Show source in client.py:18 Client is the primary user interface that wraps around foundation models. A client interface for accessing various models, such as those implemented by OpenAI, Hugging Face, etc. The client can be used to specify the model and how to access it, and can establish an SSH tunnel to a remote end point for secure access to a remote model.","title":"Client"},{"location":"alfred/client/client/#signature","text":"class Client : def __init__ ( self , model : Optional [ str ] = None , model_type : Optional [ str ] = None , end_point : Optional [ str ] = None , local_path : Optional [ str ] = None , ssh_tunnel : bool = False , ssh_node : Optional [ str ] = None , cache : Optional [ Cache ] = \"SQLite\" , ** kwargs : Any ): ...","title":"Signature"},{"location":"alfred/client/client/#clientcall","text":"Show source in client.py:230 call () function to run the model on the queries. Equivalent to run() function.","title":"Client().call"},{"location":"alfred/client/client/#arguments","text":"queries - The queries to run the model on. :type queries: Union[Query, str, List[Query], List[str]] kwargs - Additional keyword arguments (e.g. repetition_penalty, temperature, etc.) :type kwargs: Any","title":"Arguments"},{"location":"alfred/client/client/#returns","text":"The response(s) from the model. Type: Union[Response, List[Response]]","title":"Returns"},{"location":"alfred/client/client/#signature_1","text":"def __call__ ( self , queries : Union [ Query , str , List [ Query ], List [ str ]], ** kwargs : Any ) -> Union [ Response , List [ Response ]]: ...","title":"Signature"},{"location":"alfred/client/client/#clientgenerate","text":"Show source in client.py:191 Wrapper function to generate the response(s) from the model. (For completion)","title":"Client().generate"},{"location":"alfred/client/client/#arguments_1","text":"query - The query to generate the response(s) from. :type query: Union[CompletionQuery, str, List[Union[CompletionQuery, str]]] kwargs - Additional keyword arguments (e.g. repetition_penalty, temperature, etc.) :type kwargs: Any","title":"Arguments"},{"location":"alfred/client/client/#returns_1","text":"The response(s) from the model. Type: Union[Response, List[Response]]","title":"Returns"},{"location":"alfred/client/client/#signature_2","text":"def generate ( self , query : Union [ CompletionQuery , str , List [ CompletionQuery ], List [ str ]], ** kwargs : Any ) -> Union [ Response , List [ Response ]]: ...","title":"Signature"},{"location":"alfred/client/client/#clientremote_run","text":"Show source in client.py:170 Wrapper function for running the model on the queries thru a gRPC Server.","title":"Client().remote_run"},{"location":"alfred/client/client/#arguments_2","text":"queries - The queries to run the model on. :type queries: Union[Query, str, List[Query], List[str]] kwargs - Additional keyword arguments (e.g. repetition_penalty, temperature, etc.) :type kwargs: Any","title":"Arguments"},{"location":"alfred/client/client/#returns_2","text":"The response(s) from the model. Type: Union[Response, List[Response]]","title":"Returns"},{"location":"alfred/client/client/#signature_3","text":"def remote_run ( self , queries : Union [ Query , str , List [ Query ], List [ str ]], ** kwargs : Any ) -> Union [ Response , List [ Response ]]: ...","title":"Signature"},{"location":"alfred/client/client/#clientrun","text":"Show source in client.py:151 Run the model on the queries.","title":"Client().run"},{"location":"alfred/client/client/#arguments_3","text":"queries - The queries to run the model on. :type queries: Union[Query, str, List[Query], List[str]] kwargs - Additional keyword arguments (e.g. repetition_penalty, temperature, etc.) :type kwargs: Any","title":"Arguments"},{"location":"alfred/client/client/#returns_3","text":"The response(s) from the model. Type: Union[Response, List[Response]]","title":"Returns"},{"location":"alfred/client/client/#signature_4","text":"def run ( self , queries : Union [ Query , str , List [ Query ], List [ str ]], ** kwargs : Any ) -> Union [ Response , List [ Response ]]: ...","title":"Signature"},{"location":"alfred/client/client/#clientscore","text":"Show source in client.py:207 Wrapper function to score the response(s) from the model. (For ranking) TODO: Implement Query in the below format: Query can be in form of a list of ranked query or a dictionary in form of: { \"prompt\": \"query string\", \"candidates\": [\"candidate 1\", \"candidate 2\", ...] }","title":"Client().score"},{"location":"alfred/client/client/#arguments_4","text":"query - A single query object or a list of query objects :type query: Union[RankedQuery, Dict, List[RankedQuery], List[str]] kwargs - Additional keyword arguments :type kwargs: Any","title":"Arguments"},{"location":"alfred/client/client/#returns_4","text":"A single response or a list of responses Type: Union[Response, List[Response]]","title":"Returns"},{"location":"alfred/client/client/#signature_5","text":"def score ( self , query : Union [ RankedQuery , Dict , List [ RankedQuery ], List [ str ]], ** kwargs : Any ) -> Union [ Response , List [ Response ]]: ...","title":"Signature"},{"location":"alfred/client/cache/","text":"Cache alfred Index / Alfred / Client / Cache Auto-generated documentation for alfred.client.cache module. Cache Modules Modules Cache Dummy Sqlite","title":"Cache"},{"location":"alfred/client/cache/#cache","text":"alfred Index / Alfred / Client / Cache Auto-generated documentation for alfred.client.cache module. Cache Modules","title":"Cache"},{"location":"alfred/client/cache/#modules","text":"Cache Dummy Sqlite","title":"Modules"},{"location":"alfred/client/cache/cache/","text":"Cache alfred Index / Alfred / Client / Cache / Cache Auto-generated documentation for alfred.client.cache.cache module. Cache Cache Cache().cached_query Cache().load Cache().read Cache().read_batch Cache().read_by_metadata Cache().read_by_prompt Cache().read_by_prompt_and_metadata Cache().read_by_prompts_and_metadata Cache().save Cache().to_pandas Cache().write Cache().write_batch from_metadata_string to_metadata_string Cache Show source in cache.py:38 Generic Interface for caching operation that wraps certain cache implementation Currently supported cache implementations: - DummyCache: Simple Dict-based - SqliteCache: Sqlite3 - based cache TODO: - RedisCache: Redis - based cache Signature class Cache ( abc . ABC ): ... Cache().cached_query Show source in cache.py:200 Decorator function for model queries, fetch from cache db if exist else write into cache_db TODO: [1]standardize serailized prompts str [2] Merge redundent queries Arguments model_run - Model run function :type model_run: Callable Returns Decorated function Type: Callable Signature def cached_query ( self , model_run : Callable ) -> Callable : ... Cache().load Show source in cache.py:178 Load the cache from disk to the cache object Arguments path - Path to the cache file :type path: str Signature @abc . abstractmethod def load ( self , path : str ): ... Cache().read Show source in cache.py:49 Read from cache by prompt and metadata Arguments prompt - Prompt string :type prompt: str metadata - (optional) Metadata string :type metadata: str Returns List of responses Type: list Signature @abc . abstractmethod def read ( self , prompt : str , metadata : Optional [ str ] = None ) -> list : ... Cache().read_batch Show source in cache.py:64 Read a value from the cache by list of serialized prompts and metadata Arguments prompts - List of serialized prompts :type prompts: list metadata - (optional) Metadata string :type metadata: str Returns List of serialized responses Type: list Signature @abc . abstractmethod def read_batch ( self , prompts : List [ str ], metadata : Optional [ str ] = None ) -> List [ str ]: ... Cache().read_by_metadata Show source in cache.py:154 Read the record from the cache by key Arguments metadata - Metadata string :type metadata: str Returns List of records Type: list Signature @abc . abstractmethod def read_by_metadata ( self , metadata : str ) -> List : ... Cache().read_by_prompt Show source in cache.py:111 Read the record from the cache via serialized prompt Arguments prompt - Serialized prompt :type prompt: str Returns List of records Type: list Signature @abc . abstractmethod def read_by_prompt ( self , prompt : str ) -> List : ... Cache().read_by_prompt_and_metadata Show source in cache.py:124 Read the record from the cache via serialized prompt and metadata string Arguments prompt - Serialized prompt :type prompt: str metadata - Metadata string :type metadata: str Returns List of records Type: list Signature @abc . abstractmethod def read_by_prompt_and_metadata ( self , prompt : str , metadata : str ) -> List : ... Cache().read_by_prompts_and_metadata Show source in cache.py:139 Read the record from the cache via serialized prompts and metadata string Arguments prompts - List of serialized prompts :type prompts: List[str] metadata - Metadata string :type metadata: str Returns List of records Type: List Signature @abc . abstractmethod def read_by_prompts_and_metadata ( self , prompts : List [ str ], metadata : str ) -> List : ... Cache().save Show source in cache.py:167 Save the cache to disk Arguments path - Path to save the cache :type path: str Signature @abc . abstractmethod def save ( self , path : str ): ... Cache().to_pandas Show source in cache.py:189 Return the cache db as a pandas dataframe Returns Pandas dataframe Type: pd.DataFrame Signature @abc . abstractmethod def to_pandas ( self ) -> pd . DataFrame : ... Cache().write Show source in cache.py:81 Write a value to the cache by serialized prompt, serialized response and metadata Arguments prompt - Serialized prompt :type prompt: str response - Serialized response :type response: str metadata - (optional) Metadata string :type metadata: str Signature @abc . abstractmethod def write ( self , prompt : str , response : str , metadata : Optional [ str ] = None ): ... Cache().write_batch Show source in cache.py:96 Write a value to the cache by serialized prompts, serialized responses and metadata in batch Arguments prompts - List of serialized prompts :type prompts: List[str] response - List of serialized responses :type response: List[str] metadata - (optional) Metadata string :type metadata: str Signature @abc . abstractmethod def write_batch ( self , prompts : List [ str ], response : List [ str ], metadata : Optional [ str ] = None ): ... from_metadata_string Show source in cache.py:26 Convert a string of metadata to a dictionary Arguments metadata_string - String representation of the metadata from the cache :type metadata_string: str Returns Dictionary of metadata Type: dict Signature def from_metadata_string ( metadata_string : str ) -> Dict : ... to_metadata_string Show source in cache.py:14 Convert a dictionary of metadata to a string for storage in the cache Arguments kwargs - Dictionary of metadata :type kwargs: dict Returns String representation of the metadata Type: str Signature def to_metadata_string ( ** kwargs : Any ) -> str : ...","title":"Cache"},{"location":"alfred/client/cache/cache/#cache","text":"alfred Index / Alfred / Client / Cache / Cache Auto-generated documentation for alfred.client.cache.cache module. Cache Cache Cache().cached_query Cache().load Cache().read Cache().read_batch Cache().read_by_metadata Cache().read_by_prompt Cache().read_by_prompt_and_metadata Cache().read_by_prompts_and_metadata Cache().save Cache().to_pandas Cache().write Cache().write_batch from_metadata_string to_metadata_string","title":"Cache"},{"location":"alfred/client/cache/cache/#cache_1","text":"Show source in cache.py:38 Generic Interface for caching operation that wraps certain cache implementation Currently supported cache implementations: - DummyCache: Simple Dict-based - SqliteCache: Sqlite3 - based cache TODO: - RedisCache: Redis - based cache","title":"Cache"},{"location":"alfred/client/cache/cache/#signature","text":"class Cache ( abc . ABC ): ...","title":"Signature"},{"location":"alfred/client/cache/cache/#cachecached_query","text":"Show source in cache.py:200 Decorator function for model queries, fetch from cache db if exist else write into cache_db TODO: [1]standardize serailized prompts str [2] Merge redundent queries","title":"Cache().cached_query"},{"location":"alfred/client/cache/cache/#arguments","text":"model_run - Model run function :type model_run: Callable","title":"Arguments"},{"location":"alfred/client/cache/cache/#returns","text":"Decorated function Type: Callable","title":"Returns"},{"location":"alfred/client/cache/cache/#signature_1","text":"def cached_query ( self , model_run : Callable ) -> Callable : ...","title":"Signature"},{"location":"alfred/client/cache/cache/#cacheload","text":"Show source in cache.py:178 Load the cache from disk to the cache object","title":"Cache().load"},{"location":"alfred/client/cache/cache/#arguments_1","text":"path - Path to the cache file :type path: str","title":"Arguments"},{"location":"alfred/client/cache/cache/#signature_2","text":"@abc . abstractmethod def load ( self , path : str ): ...","title":"Signature"},{"location":"alfred/client/cache/cache/#cacheread","text":"Show source in cache.py:49 Read from cache by prompt and metadata","title":"Cache().read"},{"location":"alfred/client/cache/cache/#arguments_2","text":"prompt - Prompt string :type prompt: str metadata - (optional) Metadata string :type metadata: str","title":"Arguments"},{"location":"alfred/client/cache/cache/#returns_1","text":"List of responses Type: list","title":"Returns"},{"location":"alfred/client/cache/cache/#signature_3","text":"@abc . abstractmethod def read ( self , prompt : str , metadata : Optional [ str ] = None ) -> list : ...","title":"Signature"},{"location":"alfred/client/cache/cache/#cacheread_batch","text":"Show source in cache.py:64 Read a value from the cache by list of serialized prompts and metadata","title":"Cache().read_batch"},{"location":"alfred/client/cache/cache/#arguments_3","text":"prompts - List of serialized prompts :type prompts: list metadata - (optional) Metadata string :type metadata: str","title":"Arguments"},{"location":"alfred/client/cache/cache/#returns_2","text":"List of serialized responses Type: list","title":"Returns"},{"location":"alfred/client/cache/cache/#signature_4","text":"@abc . abstractmethod def read_batch ( self , prompts : List [ str ], metadata : Optional [ str ] = None ) -> List [ str ]: ...","title":"Signature"},{"location":"alfred/client/cache/cache/#cacheread_by_metadata","text":"Show source in cache.py:154 Read the record from the cache by key","title":"Cache().read_by_metadata"},{"location":"alfred/client/cache/cache/#arguments_4","text":"metadata - Metadata string :type metadata: str","title":"Arguments"},{"location":"alfred/client/cache/cache/#returns_3","text":"List of records Type: list","title":"Returns"},{"location":"alfred/client/cache/cache/#signature_5","text":"@abc . abstractmethod def read_by_metadata ( self , metadata : str ) -> List : ...","title":"Signature"},{"location":"alfred/client/cache/cache/#cacheread_by_prompt","text":"Show source in cache.py:111 Read the record from the cache via serialized prompt","title":"Cache().read_by_prompt"},{"location":"alfred/client/cache/cache/#arguments_5","text":"prompt - Serialized prompt :type prompt: str","title":"Arguments"},{"location":"alfred/client/cache/cache/#returns_4","text":"List of records Type: list","title":"Returns"},{"location":"alfred/client/cache/cache/#signature_6","text":"@abc . abstractmethod def read_by_prompt ( self , prompt : str ) -> List : ...","title":"Signature"},{"location":"alfred/client/cache/cache/#cacheread_by_prompt_and_metadata","text":"Show source in cache.py:124 Read the record from the cache via serialized prompt and metadata string","title":"Cache().read_by_prompt_and_metadata"},{"location":"alfred/client/cache/cache/#arguments_6","text":"prompt - Serialized prompt :type prompt: str metadata - Metadata string :type metadata: str","title":"Arguments"},{"location":"alfred/client/cache/cache/#returns_5","text":"List of records Type: list","title":"Returns"},{"location":"alfred/client/cache/cache/#signature_7","text":"@abc . abstractmethod def read_by_prompt_and_metadata ( self , prompt : str , metadata : str ) -> List : ...","title":"Signature"},{"location":"alfred/client/cache/cache/#cacheread_by_prompts_and_metadata","text":"Show source in cache.py:139 Read the record from the cache via serialized prompts and metadata string","title":"Cache().read_by_prompts_and_metadata"},{"location":"alfred/client/cache/cache/#arguments_7","text":"prompts - List of serialized prompts :type prompts: List[str] metadata - Metadata string :type metadata: str","title":"Arguments"},{"location":"alfred/client/cache/cache/#returns_6","text":"List of records Type: List","title":"Returns"},{"location":"alfred/client/cache/cache/#signature_8","text":"@abc . abstractmethod def read_by_prompts_and_metadata ( self , prompts : List [ str ], metadata : str ) -> List : ...","title":"Signature"},{"location":"alfred/client/cache/cache/#cachesave","text":"Show source in cache.py:167 Save the cache to disk","title":"Cache().save"},{"location":"alfred/client/cache/cache/#arguments_8","text":"path - Path to save the cache :type path: str","title":"Arguments"},{"location":"alfred/client/cache/cache/#signature_9","text":"@abc . abstractmethod def save ( self , path : str ): ...","title":"Signature"},{"location":"alfred/client/cache/cache/#cacheto_pandas","text":"Show source in cache.py:189 Return the cache db as a pandas dataframe","title":"Cache().to_pandas"},{"location":"alfred/client/cache/cache/#returns_7","text":"Pandas dataframe Type: pd.DataFrame","title":"Returns"},{"location":"alfred/client/cache/cache/#signature_10","text":"@abc . abstractmethod def to_pandas ( self ) -> pd . DataFrame : ...","title":"Signature"},{"location":"alfred/client/cache/cache/#cachewrite","text":"Show source in cache.py:81 Write a value to the cache by serialized prompt, serialized response and metadata","title":"Cache().write"},{"location":"alfred/client/cache/cache/#arguments_9","text":"prompt - Serialized prompt :type prompt: str response - Serialized response :type response: str metadata - (optional) Metadata string :type metadata: str","title":"Arguments"},{"location":"alfred/client/cache/cache/#signature_11","text":"@abc . abstractmethod def write ( self , prompt : str , response : str , metadata : Optional [ str ] = None ): ...","title":"Signature"},{"location":"alfred/client/cache/cache/#cachewrite_batch","text":"Show source in cache.py:96 Write a value to the cache by serialized prompts, serialized responses and metadata in batch","title":"Cache().write_batch"},{"location":"alfred/client/cache/cache/#arguments_10","text":"prompts - List of serialized prompts :type prompts: List[str] response - List of serialized responses :type response: List[str] metadata - (optional) Metadata string :type metadata: str","title":"Arguments"},{"location":"alfred/client/cache/cache/#signature_12","text":"@abc . abstractmethod def write_batch ( self , prompts : List [ str ], response : List [ str ], metadata : Optional [ str ] = None ): ...","title":"Signature"},{"location":"alfred/client/cache/cache/#from_metadata_string","text":"Show source in cache.py:26 Convert a string of metadata to a dictionary","title":"from_metadata_string"},{"location":"alfred/client/cache/cache/#arguments_11","text":"metadata_string - String representation of the metadata from the cache :type metadata_string: str","title":"Arguments"},{"location":"alfred/client/cache/cache/#returns_8","text":"Dictionary of metadata Type: dict","title":"Returns"},{"location":"alfred/client/cache/cache/#signature_13","text":"def from_metadata_string ( metadata_string : str ) -> Dict : ...","title":"Signature"},{"location":"alfred/client/cache/cache/#to_metadata_string","text":"Show source in cache.py:14 Convert a dictionary of metadata to a string for storage in the cache","title":"to_metadata_string"},{"location":"alfred/client/cache/cache/#arguments_12","text":"kwargs - Dictionary of metadata :type kwargs: dict","title":"Arguments"},{"location":"alfred/client/cache/cache/#returns_9","text":"String representation of the metadata Type: str","title":"Returns"},{"location":"alfred/client/cache/cache/#signature_14","text":"def to_metadata_string ( ** kwargs : Any ) -> str : ...","title":"Signature"},{"location":"alfred/client/cache/dummy/","text":"Dummy alfred Index / Alfred / Client / Cache / Dummy Auto-generated documentation for alfred.client.cache.dummy module. Dummy DummyCache DummyCache().read DummyCache().read_by_metadata DummyCache().read_by_prompt DummyCache().read_by_prompt_and_metadata DummyCache().save DummyCache().to_pandas DummyCache().write DummyCache Show source in dummy.py:6 A simple in-memory cache implementation. (for testing) This class is intended as a dummy implementation of the Cache interface for testing purposes. It stores cache entries in a dictionary in memory and does not persist them to disk. Signature class DummyCache ( Cache ): def __init__ ( self ): ... See also Cache DummyCache().read Show source in dummy.py:19 Read the record from the cache by serialized prompt and metadata Arguments prompt - The serialized prompt to search for :type prompt: str metadata - (optional) The metadata to search for, defaults to None :type metadata: str Returns The response from the cache Type: List Signature def read ( self , prompt : str , metadata : Optional [ str ] = None ) -> List : ... DummyCache().read_by_metadata Show source in dummy.py:74 Read a dummy empty list Arguments metadata - (optional) The metadata to search for, defaults to None :type metadata: str Returns An empty list Type: list Signature def read_by_metadata ( self , metadata : Optional [ str ] = None ) -> List : ... DummyCache().read_by_prompt Show source in dummy.py:50 Read a record from the cache by serialized prompt Arguments prompt - The serialized prompt to search for :type prompt: str Returns The response from the cache Type: List Signature def read_by_prompt ( self , prompt : str ) -> List : ... DummyCache().read_by_prompt_and_metadata Show source in dummy.py:61 Read a record from the cache by serialized prompt and metadata Arguments prompt - The serialized prompt to search for :type prompt: str metadata - The metadata to search for :type metadata: str Returns The response from the cache Type: List Signature def read_by_prompt_and_metadata ( self , prompt : str , metadata : str ) -> List : ... DummyCache().save Show source in dummy.py:85 Does not save but return the path argrument Arguments path - The path to save the cache to :type path: str Returns The path argument Type: str Signature def save ( self , path : str ) -> str : ... DummyCache().to_pandas Show source in dummy.py:96 Does nothing. Return None. Returns None Type: None Signature def to_pandas ( self ) -> None : ... DummyCache().write Show source in dummy.py:37 Write a prompt-response pair to the cache Arguments prompt - The serialized prompt to write :type prompt: str response - The serialized response to write :type response: str metadata - (optional) The metadata to write, defaults to None :type metadata: str Signature def write ( self , prompt : str , response : str , metadata : Optional [ str ] = None ): ...","title":"Dummy"},{"location":"alfred/client/cache/dummy/#dummy","text":"alfred Index / Alfred / Client / Cache / Dummy Auto-generated documentation for alfred.client.cache.dummy module. Dummy DummyCache DummyCache().read DummyCache().read_by_metadata DummyCache().read_by_prompt DummyCache().read_by_prompt_and_metadata DummyCache().save DummyCache().to_pandas DummyCache().write","title":"Dummy"},{"location":"alfred/client/cache/dummy/#dummycache","text":"Show source in dummy.py:6 A simple in-memory cache implementation. (for testing) This class is intended as a dummy implementation of the Cache interface for testing purposes. It stores cache entries in a dictionary in memory and does not persist them to disk.","title":"DummyCache"},{"location":"alfred/client/cache/dummy/#signature","text":"class DummyCache ( Cache ): def __init__ ( self ): ...","title":"Signature"},{"location":"alfred/client/cache/dummy/#see-also","text":"Cache","title":"See also"},{"location":"alfred/client/cache/dummy/#dummycacheread","text":"Show source in dummy.py:19 Read the record from the cache by serialized prompt and metadata","title":"DummyCache().read"},{"location":"alfred/client/cache/dummy/#arguments","text":"prompt - The serialized prompt to search for :type prompt: str metadata - (optional) The metadata to search for, defaults to None :type metadata: str","title":"Arguments"},{"location":"alfred/client/cache/dummy/#returns","text":"The response from the cache Type: List","title":"Returns"},{"location":"alfred/client/cache/dummy/#signature_1","text":"def read ( self , prompt : str , metadata : Optional [ str ] = None ) -> List : ...","title":"Signature"},{"location":"alfred/client/cache/dummy/#dummycacheread_by_metadata","text":"Show source in dummy.py:74 Read a dummy empty list","title":"DummyCache().read_by_metadata"},{"location":"alfred/client/cache/dummy/#arguments_1","text":"metadata - (optional) The metadata to search for, defaults to None :type metadata: str","title":"Arguments"},{"location":"alfred/client/cache/dummy/#returns_1","text":"An empty list Type: list","title":"Returns"},{"location":"alfred/client/cache/dummy/#signature_2","text":"def read_by_metadata ( self , metadata : Optional [ str ] = None ) -> List : ...","title":"Signature"},{"location":"alfred/client/cache/dummy/#dummycacheread_by_prompt","text":"Show source in dummy.py:50 Read a record from the cache by serialized prompt","title":"DummyCache().read_by_prompt"},{"location":"alfred/client/cache/dummy/#arguments_2","text":"prompt - The serialized prompt to search for :type prompt: str","title":"Arguments"},{"location":"alfred/client/cache/dummy/#returns_2","text":"The response from the cache Type: List","title":"Returns"},{"location":"alfred/client/cache/dummy/#signature_3","text":"def read_by_prompt ( self , prompt : str ) -> List : ...","title":"Signature"},{"location":"alfred/client/cache/dummy/#dummycacheread_by_prompt_and_metadata","text":"Show source in dummy.py:61 Read a record from the cache by serialized prompt and metadata","title":"DummyCache().read_by_prompt_and_metadata"},{"location":"alfred/client/cache/dummy/#arguments_3","text":"prompt - The serialized prompt to search for :type prompt: str metadata - The metadata to search for :type metadata: str","title":"Arguments"},{"location":"alfred/client/cache/dummy/#returns_3","text":"The response from the cache Type: List","title":"Returns"},{"location":"alfred/client/cache/dummy/#signature_4","text":"def read_by_prompt_and_metadata ( self , prompt : str , metadata : str ) -> List : ...","title":"Signature"},{"location":"alfred/client/cache/dummy/#dummycachesave","text":"Show source in dummy.py:85 Does not save but return the path argrument","title":"DummyCache().save"},{"location":"alfred/client/cache/dummy/#arguments_4","text":"path - The path to save the cache to :type path: str","title":"Arguments"},{"location":"alfred/client/cache/dummy/#returns_4","text":"The path argument Type: str","title":"Returns"},{"location":"alfred/client/cache/dummy/#signature_5","text":"def save ( self , path : str ) -> str : ...","title":"Signature"},{"location":"alfred/client/cache/dummy/#dummycacheto_pandas","text":"Show source in dummy.py:96 Does nothing. Return None.","title":"DummyCache().to_pandas"},{"location":"alfred/client/cache/dummy/#returns_5","text":"None Type: None","title":"Returns"},{"location":"alfred/client/cache/dummy/#signature_6","text":"def to_pandas ( self ) -> None : ...","title":"Signature"},{"location":"alfred/client/cache/dummy/#dummycachewrite","text":"Show source in dummy.py:37 Write a prompt-response pair to the cache","title":"DummyCache().write"},{"location":"alfred/client/cache/dummy/#arguments_5","text":"prompt - The serialized prompt to write :type prompt: str response - The serialized response to write :type response: str metadata - (optional) The metadata to write, defaults to None :type metadata: str","title":"Arguments"},{"location":"alfred/client/cache/dummy/#signature_7","text":"def write ( self , prompt : str , response : str , metadata : Optional [ str ] = None ): ...","title":"Signature"},{"location":"alfred/client/cache/sqlite/","text":"Sqlite alfred Index / Alfred / Client / Cache / Sqlite Auto-generated documentation for alfred.client.cache.sqlite module. Sqlite SQLiteCache TODO: Make response (de)serializable such that it fits in to the entries SQLiteCache().fetch_data SQLiteCache().load SQLiteCache().read SQLiteCache().read_batch SQLiteCache().read_by_metadata SQLiteCache().read_by_prompt SQLiteCache().read_by_prompt_and_metadata SQLiteCache().read_by_prompts_and_metadata SQLiteCache().save SQLiteCache().to_pandas SQLiteCache().write SQLiteCache().write_batch SQLiteCache Show source in sqlite.py:12 In-memory/local storage key-value store caching system using SQLite The cache operates in memory and is periodically saved to disk. The cache's main components are a 3-column table that contains: - prompt: the serialized prompt that was used to generate the response - metadata: the metadata associated with the prompt - response: the serialized response generated by the prompt TODO: Make response (de)serializable such that it fits in to the entries Signature class SQLiteCache ( Cache ): def __init__ ( self , session_name : str = \"prompt-session-0\" , cache_location : Optional [ str ] = None , ): ... See also Cache SQLiteCache().fetch_data Show source in sqlite.py:94 Wrapper function for fetching data with specific sql suffix and args Arguments sql_suffix - The sql suffix to use :type sql_suffix: str args - The args to use :type args: Any Returns The fetched data records as List. Will return empty list if no records found Type: List Signature def fetch_data ( self , sql_suffix : str , * args : Any ) -> List : ... SQLiteCache().load Show source in sqlite.py:227 Load the cache from a file Arguments path - (optional) The path to load the cache from. If not provided, will load from the path provided at initialization :type path: str Signature def load ( self , path : Optional [ str ] = None ): ... SQLiteCache().read Show source in sqlite.py:165 Read records from the cache by prompt and metadata Arguments prompt - The prompt to read :type prompt: str metadata - (optional) The metadata to read :type metadata: str Returns The records as a list Type: List Signature def read ( self , prompt : str , metadata : Optional [ str ] = None ) -> List : ... SQLiteCache().read_batch Show source in sqlite.py:183 Read a batch of values from the cache by prompt return responses, new_q_idx, _new_queries TODO: Need to reimplement this to support unided responses Arguments prompts - The prompts to read :type prompts: List[str] metadata - (optional) The metadata to read :type metadata: str Returns The responses as a list Type: List Signature def read_batch ( self , prompts : List [ str ], metadata : Optional [ str ] = None ) -> List : ... SQLiteCache().read_by_metadata Show source in sqlite.py:154 Read records from the cache by metadata Arguments metadata - The metadata to read :type metadata: str Returns The records as a list Type: List Signature def read_by_metadata ( self , metadata : str ) -> List : ... SQLiteCache().read_by_prompt Show source in sqlite.py:113 Read records from the cache by prompt Arguments prompt - The prompt to read :type prompt: str Returns The records as a list Type: List Signature def read_by_prompt ( self , prompt : str ) -> List : ... SQLiteCache().read_by_prompt_and_metadata Show source in sqlite.py:124 Read records from the cache by prompt and metadata Arguments prompt - The prompt to read :type prompt: str metadata - The metadata to read :type metadata: str Returns The records as a list Type: List Signature def read_by_prompt_and_metadata ( self , prompt : str , metadata : str ) -> List : ... SQLiteCache().read_by_prompts_and_metadata Show source in sqlite.py:138 Read records from the cache by list of prompts and metadata Arguments prompts - The list of prompts to read :type prompts: List[str] metadata - The metadata to read :type metadata: str Returns The records as a list Type: List Signature def read_by_prompts_and_metadata ( self , prompts : List [ str ], metadata : str ) -> List : ... SQLiteCache().save Show source in sqlite.py:218 Save the cache to a file Arguments path - (optional) The path to save the cache to. If not provided, will save to the path provided at initialization :type path: str Signature def save ( self , path : Optional [ str ] = None ): ... SQLiteCache().to_pandas Show source in sqlite.py:209 Return the cache db as a pandas dataframe Returns The cache db as a pandas dataframe Type: pd.DataFrame Signature def to_pandas ( self ) -> pd . DataFrame : ... SQLiteCache().write Show source in sqlite.py:54 Write a prompt, response, and metadata record to the cache Arguments prompt - The prompt to write :type prompt: str response - The response to write :type response: str metadata - (optional) The metadata to write :type metadata: str Signature def write ( self , prompt : str , response : str , metadata : Optional [ str ] = None ): ... SQLiteCache().write_batch Show source in sqlite.py:74 Write a batch of serialized prompt, serialized response, and metadata records to the cache Arguments prompts - The serialized prompts to write :type prompts: List[str] responses - The serialized responses to write :type responses: List[str] metadata - (optional) The metadata to write :type metadata: str Signature def write_batch ( self , prompts : List [ str ], responses : List [ str ], metadata : Optional [ str ] = None ): ...","title":"Sqlite"},{"location":"alfred/client/cache/sqlite/#sqlite","text":"alfred Index / Alfred / Client / Cache / Sqlite Auto-generated documentation for alfred.client.cache.sqlite module. Sqlite SQLiteCache TODO: Make response (de)serializable such that it fits in to the entries SQLiteCache().fetch_data SQLiteCache().load SQLiteCache().read SQLiteCache().read_batch SQLiteCache().read_by_metadata SQLiteCache().read_by_prompt SQLiteCache().read_by_prompt_and_metadata SQLiteCache().read_by_prompts_and_metadata SQLiteCache().save SQLiteCache().to_pandas SQLiteCache().write SQLiteCache().write_batch","title":"Sqlite"},{"location":"alfred/client/cache/sqlite/#sqlitecache","text":"Show source in sqlite.py:12 In-memory/local storage key-value store caching system using SQLite The cache operates in memory and is periodically saved to disk. The cache's main components are a 3-column table that contains: - prompt: the serialized prompt that was used to generate the response - metadata: the metadata associated with the prompt - response: the serialized response generated by the prompt","title":"SQLiteCache"},{"location":"alfred/client/cache/sqlite/#todo-make-response-deserializable-such-that-it-fits-in-to-the-entries","text":"","title":"TODO: Make response (de)serializable such that it fits in to the entries"},{"location":"alfred/client/cache/sqlite/#signature","text":"class SQLiteCache ( Cache ): def __init__ ( self , session_name : str = \"prompt-session-0\" , cache_location : Optional [ str ] = None , ): ...","title":"Signature"},{"location":"alfred/client/cache/sqlite/#see-also","text":"Cache","title":"See also"},{"location":"alfred/client/cache/sqlite/#sqlitecachefetch_data","text":"Show source in sqlite.py:94 Wrapper function for fetching data with specific sql suffix and args","title":"SQLiteCache().fetch_data"},{"location":"alfred/client/cache/sqlite/#arguments","text":"sql_suffix - The sql suffix to use :type sql_suffix: str args - The args to use :type args: Any","title":"Arguments"},{"location":"alfred/client/cache/sqlite/#returns","text":"The fetched data records as List. Will return empty list if no records found Type: List","title":"Returns"},{"location":"alfred/client/cache/sqlite/#signature_1","text":"def fetch_data ( self , sql_suffix : str , * args : Any ) -> List : ...","title":"Signature"},{"location":"alfred/client/cache/sqlite/#sqlitecacheload","text":"Show source in sqlite.py:227 Load the cache from a file","title":"SQLiteCache().load"},{"location":"alfred/client/cache/sqlite/#arguments_1","text":"path - (optional) The path to load the cache from. If not provided, will load from the path provided at initialization :type path: str","title":"Arguments"},{"location":"alfred/client/cache/sqlite/#signature_2","text":"def load ( self , path : Optional [ str ] = None ): ...","title":"Signature"},{"location":"alfred/client/cache/sqlite/#sqlitecacheread","text":"Show source in sqlite.py:165 Read records from the cache by prompt and metadata","title":"SQLiteCache().read"},{"location":"alfred/client/cache/sqlite/#arguments_2","text":"prompt - The prompt to read :type prompt: str metadata - (optional) The metadata to read :type metadata: str","title":"Arguments"},{"location":"alfred/client/cache/sqlite/#returns_1","text":"The records as a list Type: List","title":"Returns"},{"location":"alfred/client/cache/sqlite/#signature_3","text":"def read ( self , prompt : str , metadata : Optional [ str ] = None ) -> List : ...","title":"Signature"},{"location":"alfred/client/cache/sqlite/#sqlitecacheread_batch","text":"Show source in sqlite.py:183 Read a batch of values from the cache by prompt return responses, new_q_idx, _new_queries TODO: Need to reimplement this to support unided responses","title":"SQLiteCache().read_batch"},{"location":"alfred/client/cache/sqlite/#arguments_3","text":"prompts - The prompts to read :type prompts: List[str] metadata - (optional) The metadata to read :type metadata: str","title":"Arguments"},{"location":"alfred/client/cache/sqlite/#returns_2","text":"The responses as a list Type: List","title":"Returns"},{"location":"alfred/client/cache/sqlite/#signature_4","text":"def read_batch ( self , prompts : List [ str ], metadata : Optional [ str ] = None ) -> List : ...","title":"Signature"},{"location":"alfred/client/cache/sqlite/#sqlitecacheread_by_metadata","text":"Show source in sqlite.py:154 Read records from the cache by metadata","title":"SQLiteCache().read_by_metadata"},{"location":"alfred/client/cache/sqlite/#arguments_4","text":"metadata - The metadata to read :type metadata: str","title":"Arguments"},{"location":"alfred/client/cache/sqlite/#returns_3","text":"The records as a list Type: List","title":"Returns"},{"location":"alfred/client/cache/sqlite/#signature_5","text":"def read_by_metadata ( self , metadata : str ) -> List : ...","title":"Signature"},{"location":"alfred/client/cache/sqlite/#sqlitecacheread_by_prompt","text":"Show source in sqlite.py:113 Read records from the cache by prompt","title":"SQLiteCache().read_by_prompt"},{"location":"alfred/client/cache/sqlite/#arguments_5","text":"prompt - The prompt to read :type prompt: str","title":"Arguments"},{"location":"alfred/client/cache/sqlite/#returns_4","text":"The records as a list Type: List","title":"Returns"},{"location":"alfred/client/cache/sqlite/#signature_6","text":"def read_by_prompt ( self , prompt : str ) -> List : ...","title":"Signature"},{"location":"alfred/client/cache/sqlite/#sqlitecacheread_by_prompt_and_metadata","text":"Show source in sqlite.py:124 Read records from the cache by prompt and metadata","title":"SQLiteCache().read_by_prompt_and_metadata"},{"location":"alfred/client/cache/sqlite/#arguments_6","text":"prompt - The prompt to read :type prompt: str metadata - The metadata to read :type metadata: str","title":"Arguments"},{"location":"alfred/client/cache/sqlite/#returns_5","text":"The records as a list Type: List","title":"Returns"},{"location":"alfred/client/cache/sqlite/#signature_7","text":"def read_by_prompt_and_metadata ( self , prompt : str , metadata : str ) -> List : ...","title":"Signature"},{"location":"alfred/client/cache/sqlite/#sqlitecacheread_by_prompts_and_metadata","text":"Show source in sqlite.py:138 Read records from the cache by list of prompts and metadata","title":"SQLiteCache().read_by_prompts_and_metadata"},{"location":"alfred/client/cache/sqlite/#arguments_7","text":"prompts - The list of prompts to read :type prompts: List[str] metadata - The metadata to read :type metadata: str","title":"Arguments"},{"location":"alfred/client/cache/sqlite/#returns_6","text":"The records as a list Type: List","title":"Returns"},{"location":"alfred/client/cache/sqlite/#signature_8","text":"def read_by_prompts_and_metadata ( self , prompts : List [ str ], metadata : str ) -> List : ...","title":"Signature"},{"location":"alfred/client/cache/sqlite/#sqlitecachesave","text":"Show source in sqlite.py:218 Save the cache to a file","title":"SQLiteCache().save"},{"location":"alfred/client/cache/sqlite/#arguments_8","text":"path - (optional) The path to save the cache to. If not provided, will save to the path provided at initialization :type path: str","title":"Arguments"},{"location":"alfred/client/cache/sqlite/#signature_9","text":"def save ( self , path : Optional [ str ] = None ): ...","title":"Signature"},{"location":"alfred/client/cache/sqlite/#sqlitecacheto_pandas","text":"Show source in sqlite.py:209 Return the cache db as a pandas dataframe","title":"SQLiteCache().to_pandas"},{"location":"alfred/client/cache/sqlite/#returns_7","text":"The cache db as a pandas dataframe Type: pd.DataFrame","title":"Returns"},{"location":"alfred/client/cache/sqlite/#signature_10","text":"def to_pandas ( self ) -> pd . DataFrame : ...","title":"Signature"},{"location":"alfred/client/cache/sqlite/#sqlitecachewrite","text":"Show source in sqlite.py:54 Write a prompt, response, and metadata record to the cache","title":"SQLiteCache().write"},{"location":"alfred/client/cache/sqlite/#arguments_9","text":"prompt - The prompt to write :type prompt: str response - The response to write :type response: str metadata - (optional) The metadata to write :type metadata: str","title":"Arguments"},{"location":"alfred/client/cache/sqlite/#signature_11","text":"def write ( self , prompt : str , response : str , metadata : Optional [ str ] = None ): ...","title":"Signature"},{"location":"alfred/client/cache/sqlite/#sqlitecachewrite_batch","text":"Show source in sqlite.py:74 Write a batch of serialized prompt, serialized response, and metadata records to the cache","title":"SQLiteCache().write_batch"},{"location":"alfred/client/cache/sqlite/#arguments_10","text":"prompts - The serialized prompts to write :type prompts: List[str] responses - The serialized responses to write :type responses: List[str] metadata - (optional) The metadata to write :type metadata: str","title":"Arguments"},{"location":"alfred/client/cache/sqlite/#signature_12","text":"def write_batch ( self , prompts : List [ str ], responses : List [ str ], metadata : Optional [ str ] = None ): ...","title":"Signature"},{"location":"alfred/client/ssh/","text":"Ssh alfred Index / Alfred / Client / Ssh Auto-generated documentation for alfred.client.ssh module. Ssh Modules Modules SSHTunnel Utils","title":"Ssh"},{"location":"alfred/client/ssh/#ssh","text":"alfred Index / Alfred / Client / Ssh Auto-generated documentation for alfred.client.ssh module. Ssh Modules","title":"Ssh"},{"location":"alfred/client/ssh/#modules","text":"SSHTunnel Utils","title":"Modules"},{"location":"alfred/client/ssh/sshtunnel/","text":"SSHTunnel alfred Index / Alfred / Client / Ssh / SSHTunnel Auto-generated documentation for alfred.client.ssh.sshtunnel module. SSHTunnel SSHTunnel SSHTunnel.adaptive_handler SSHTunnel().start SSHTunnel().stop SSHTunnel Show source in sshtunnel.py:12 SSH Tunnel implemented with paramiko and supports interactive authentication This tunnel would be very useful if you have a alfred.fm model on remote server that you want to access It also supports tunneling via a jump host: e.g. model on a gpu node of a cluster can use login node as jump This will be equivalent to SSH -L commands Signature class SSHTunnel : def __init__ ( self , remote_host : str , remote_port : Union [ int , str ], local_port : Union [ int , str ] = 10705 , username : Optional [ str ] = None , remote_node_address : Optional [ str ] = None , remote_bind_port : Optional [ Union [ int , str ]] = 443 , handler : Callable = None , ): ... SSHTunnel.adaptive_handler Show source in sshtunnel.py:21 Authentication handler for paramiko's interactive authentication Signature @staticmethod def adaptive_handler ( title , instructions , prompt_list ): ... SSHTunnel().start Show source in sshtunnel.py:74 Start the tunnel Signature def start ( self ): ... SSHTunnel().stop Show source in sshtunnel.py:117 Stop the tunnel Signature def stop ( self ): ...","title":"SSHTunnel"},{"location":"alfred/client/ssh/sshtunnel/#sshtunnel","text":"alfred Index / Alfred / Client / Ssh / SSHTunnel Auto-generated documentation for alfred.client.ssh.sshtunnel module. SSHTunnel SSHTunnel SSHTunnel.adaptive_handler SSHTunnel().start SSHTunnel().stop","title":"SSHTunnel"},{"location":"alfred/client/ssh/sshtunnel/#sshtunnel_1","text":"Show source in sshtunnel.py:12 SSH Tunnel implemented with paramiko and supports interactive authentication This tunnel would be very useful if you have a alfred.fm model on remote server that you want to access It also supports tunneling via a jump host: e.g. model on a gpu node of a cluster can use login node as jump This will be equivalent to SSH -L commands","title":"SSHTunnel"},{"location":"alfred/client/ssh/sshtunnel/#signature","text":"class SSHTunnel : def __init__ ( self , remote_host : str , remote_port : Union [ int , str ], local_port : Union [ int , str ] = 10705 , username : Optional [ str ] = None , remote_node_address : Optional [ str ] = None , remote_bind_port : Optional [ Union [ int , str ]] = 443 , handler : Callable = None , ): ...","title":"Signature"},{"location":"alfred/client/ssh/sshtunnel/#sshtunneladaptive_handler","text":"Show source in sshtunnel.py:21 Authentication handler for paramiko's interactive authentication","title":"SSHTunnel.adaptive_handler"},{"location":"alfred/client/ssh/sshtunnel/#signature_1","text":"@staticmethod def adaptive_handler ( title , instructions , prompt_list ): ...","title":"Signature"},{"location":"alfred/client/ssh/sshtunnel/#sshtunnelstart","text":"Show source in sshtunnel.py:74 Start the tunnel","title":"SSHTunnel().start"},{"location":"alfred/client/ssh/sshtunnel/#signature_2","text":"def start ( self ): ...","title":"Signature"},{"location":"alfred/client/ssh/sshtunnel/#sshtunnelstop","text":"Show source in sshtunnel.py:117 Stop the tunnel","title":"SSHTunnel().stop"},{"location":"alfred/client/ssh/sshtunnel/#signature_3","text":"def stop ( self ): ...","title":"Signature"},{"location":"alfred/client/ssh/utils/","text":"Utils alfred Index / Alfred / Client / Ssh / Utils Auto-generated documentation for alfred.client.ssh.utils module. Utils ForwardServer Handler Handler().handle forward_tunnel get_host_port port_finder ForwardServer Show source in utils.py:15 A simple TCP forwarding server inherited from SocketServer.ThreadingTCPServer Signature class ForwardServer ( SocketServer . ThreadingTCPServer ): ... Handler Show source in utils.py:23 Signature class Handler ( SocketServer . BaseRequestHandler ): ... Handler().handle Show source in utils.py:24 Signature def handle ( self ): ... forward_tunnel Show source in utils.py:53 Signature def forward_tunnel ( local_port , remote_host , remote_port , transport ): ... get_host_port Show source in utils.py:64 parse 'hostname:22' into a host and port, with the port optional Signature def get_host_port ( spec , default_port ): ... port_finder Show source in utils.py:71 Finds the next available port if given port is not available Signature def port_finder ( port : Union [ str , int ], host : str = \"\" ) -> int : ...","title":"Utils"},{"location":"alfred/client/ssh/utils/#utils","text":"alfred Index / Alfred / Client / Ssh / Utils Auto-generated documentation for alfred.client.ssh.utils module. Utils ForwardServer Handler Handler().handle forward_tunnel get_host_port port_finder","title":"Utils"},{"location":"alfred/client/ssh/utils/#forwardserver","text":"Show source in utils.py:15 A simple TCP forwarding server inherited from SocketServer.ThreadingTCPServer","title":"ForwardServer"},{"location":"alfred/client/ssh/utils/#signature","text":"class ForwardServer ( SocketServer . ThreadingTCPServer ): ...","title":"Signature"},{"location":"alfred/client/ssh/utils/#handler","text":"Show source in utils.py:23","title":"Handler"},{"location":"alfred/client/ssh/utils/#signature_1","text":"class Handler ( SocketServer . BaseRequestHandler ): ...","title":"Signature"},{"location":"alfred/client/ssh/utils/#handlerhandle","text":"Show source in utils.py:24","title":"Handler().handle"},{"location":"alfred/client/ssh/utils/#signature_2","text":"def handle ( self ): ...","title":"Signature"},{"location":"alfred/client/ssh/utils/#forward_tunnel","text":"Show source in utils.py:53","title":"forward_tunnel"},{"location":"alfred/client/ssh/utils/#signature_3","text":"def forward_tunnel ( local_port , remote_host , remote_port , transport ): ...","title":"Signature"},{"location":"alfred/client/ssh/utils/#get_host_port","text":"Show source in utils.py:64 parse 'hostname:22' into a host and port, with the port optional","title":"get_host_port"},{"location":"alfred/client/ssh/utils/#signature_4","text":"def get_host_port ( spec , default_port ): ...","title":"Signature"},{"location":"alfred/client/ssh/utils/#port_finder","text":"Show source in utils.py:71 Finds the next available port if given port is not available","title":"port_finder"},{"location":"alfred/client/ssh/utils/#signature_5","text":"def port_finder ( port : Union [ str , int ], host : str = \"\" ) -> int : ...","title":"Signature"},{"location":"alfred/data/","text":"Data alfred Index / Alfred / Data Auto-generated documentation for alfred.data module. Data from_csv from_json from_pandas from_sql_table Modules from_csv Show source in init .py:5 Load a csv file as a dataset Arguments csv_file - path to csv file / url to csv file :type csv_file: str Returns IterableArrowDataset object Type: IterableArrowDataset Signature def from_csv ( csv_file : str ) -> IterableArrowDataset : ... from_json Show source in init .py:29 Load a json file as a dataset Arguments json_file - path to json file / url to json file :type json_file: str Returns IterableArrowDataset object Type: IterableArrowDataset Signature def from_json ( json_file : str ) -> IterableArrowDataset : ... from_pandas Show source in init .py:17 Load a pandas dataframe as a dataset Arguments df - pandas dataframe :type df: pandas.DataFrame Returns IterableArrowDataset object Type: IterableArrowDataset Signature def from_pandas ( df : DataFrame ) -> IterableArrowDataset : ... from_sql_table Show source in init .py:41 Load a sql table as a dataset Arguments sql_table_name - name of the table to load :type sql_table_name: str sql_connection_string - connection string to the database :type sql_connection_string: str Returns IterableArrowDataset object Type: IterableArrowDataset Signature def from_sql_table ( sql_table_name , sql_connection_string ) -> IterableArrowDataset : ... Modules Arrow Dataset Wrench","title":"Data"},{"location":"alfred/data/#data","text":"alfred Index / Alfred / Data Auto-generated documentation for alfred.data module. Data from_csv from_json from_pandas from_sql_table Modules","title":"Data"},{"location":"alfred/data/#from_csv","text":"Show source in init .py:5 Load a csv file as a dataset","title":"from_csv"},{"location":"alfred/data/#arguments","text":"csv_file - path to csv file / url to csv file :type csv_file: str","title":"Arguments"},{"location":"alfred/data/#returns","text":"IterableArrowDataset object Type: IterableArrowDataset","title":"Returns"},{"location":"alfred/data/#signature","text":"def from_csv ( csv_file : str ) -> IterableArrowDataset : ...","title":"Signature"},{"location":"alfred/data/#from_json","text":"Show source in init .py:29 Load a json file as a dataset","title":"from_json"},{"location":"alfred/data/#arguments_1","text":"json_file - path to json file / url to json file :type json_file: str","title":"Arguments"},{"location":"alfred/data/#returns_1","text":"IterableArrowDataset object Type: IterableArrowDataset","title":"Returns"},{"location":"alfred/data/#signature_1","text":"def from_json ( json_file : str ) -> IterableArrowDataset : ...","title":"Signature"},{"location":"alfred/data/#from_pandas","text":"Show source in init .py:17 Load a pandas dataframe as a dataset","title":"from_pandas"},{"location":"alfred/data/#arguments_2","text":"df - pandas dataframe :type df: pandas.DataFrame","title":"Arguments"},{"location":"alfred/data/#returns_2","text":"IterableArrowDataset object Type: IterableArrowDataset","title":"Returns"},{"location":"alfred/data/#signature_2","text":"def from_pandas ( df : DataFrame ) -> IterableArrowDataset : ...","title":"Signature"},{"location":"alfred/data/#from_sql_table","text":"Show source in init .py:41 Load a sql table as a dataset","title":"from_sql_table"},{"location":"alfred/data/#arguments_3","text":"sql_table_name - name of the table to load :type sql_table_name: str sql_connection_string - connection string to the database :type sql_connection_string: str","title":"Arguments"},{"location":"alfred/data/#returns_3","text":"IterableArrowDataset object Type: IterableArrowDataset","title":"Returns"},{"location":"alfred/data/#signature_3","text":"def from_sql_table ( sql_table_name , sql_connection_string ) -> IterableArrowDataset : ...","title":"Signature"},{"location":"alfred/data/#modules","text":"Arrow Dataset Wrench","title":"Modules"},{"location":"alfred/data/arrow/","text":"Arrow alfred Index / Alfred / Data / Arrow Auto-generated documentation for alfred.data.arrow module. Arrow BufferedArrowDataset BufferedArrowDataset(). getitem BufferedArrowDataset(). iter BufferedArrowDataset(). len BufferedArrowDataset(). repr BufferedArrowDataset(). version BufferedArrowDataset().data BufferedArrowDataset().info BufferedArrowDataset().load_from_disk BufferedArrowDataset().num_cols BufferedArrowDataset().num_rows BufferedArrowDataset().save_to_disk BufferedArrowDataset().shape BufferedArrowDataset().split BufferedArrowDataset().version IterableArrowDataset IterableArrowDataset(). getitem IterableArrowDataset(). iter IterableArrowDataset(). len IterableArrowDataset(). repr IterableArrowDataset(). version IterableArrowDataset().columns IterableArrowDataset().data IterableArrowDataset().info IterableArrowDataset().itercolumns IterableArrowDataset().load_from_disk IterableArrowDataset().num_cols IterableArrowDataset().num_rows IterableArrowDataset.pyarrow_typer IterableArrowDataset().save_to_disk IterableArrowDataset().schema IterableArrowDataset().shape IterableArrowDataset().split IterableArrowDataset().version BufferedArrowDataset Show source in arrow.py:202 This class represents a dataset stored in a pyarrow buffer. It provides methods for accessing and iterating over the data, as well as for saving and loading the dataset to and from disk. This will be very useful for datasets that are too large to fit into memory. Properties: shape (Tuple[int, int]): The shape of the dataset (number of rows and columns). num_rows (int): The number of rows in the dataset. num_cols (int): The number of columns in the dataset. Methods - data() - Return the underlying pyarrow Table. - info() - Return the metadata about the dataset. - split() - Return the information about how the dataset has been split. - version() - Return the version of the dataset. - len () - Return the number of rows in the dataset. - getitem (uid) - Return the row with the given unique identifier. - iter () - Iterate over the rows of the dataset, yielding a dictionary for each row. - save_to_disk(path - str): Save the dataset to disk at the specified path. - load_from_disk(path - str): Load the dataset from disk from the specified path. Signature class BufferedArrowDataset ( Dataset ): def __init__ ( self , buffer : pyarrow . Buffer , info : Optional [ DatasetInfo ] = None , split : Optional [ Union [ str , NamedSplit ]] = None , ): ... BufferedArrowDataset(). getitem Show source in arrow.py:289 Retuns the row with the given unique identifier. Arguments uid - The unique identifier of the row to return. :type uid: int or slice kawrgs - Additional keyword arguments. :type kawrgs: Any Returns The row with the given unique identifier. Type: Dict[str, Any] Signature def __getitem__ ( self , uid : int , ** kawrgs : Any ) -> Dict [ str , Any ]: ... BufferedArrowDataset(). iter Show source in arrow.py:302 Iterator over the rows of the dataset, yielding a dictionary for each row. Returns An iterator over the rows of the dataset, yielding a dictionary for each row. Type: Iterable Signature def __iter__ ( self ) -> Iterable : ... BufferedArrowDataset(). len Show source in arrow.py:285 returns the number of rows in the dataset Signature def __len__ ( self ) -> int : ... BufferedArrowDataset(). repr Show source in arrow.py:313 returns a string representation of the dataset Signature def __repr__ ( self ): ... BufferedArrowDataset(). version Show source in arrow.py:281 returns the version of the dataset Signature def __version__ ( self ) -> str : ... BufferedArrowDataset().data Show source in arrow.py:265 returns the underlying pyarrow Table Signature def data ( self ): ... BufferedArrowDataset().info Show source in arrow.py:269 returns the metadata about the dataset Signature def info ( self ): ... BufferedArrowDataset().load_from_disk Show source in arrow.py:321 loads the dataset from disk from the specified path Signature def load_from_disk ( self , path : str ): ... BufferedArrowDataset().num_cols Show source in arrow.py:260 returns the number of columns in the dataset Signature @property def num_cols ( self ) -> int : ... BufferedArrowDataset().num_rows Show source in arrow.py:255 returns the number of rows in the dataset Signature @property def num_rows ( self ) -> int : ... BufferedArrowDataset().save_to_disk Show source in arrow.py:317 saves the dataset to disk at the specified path Signature def save_to_disk ( self , path : str ): ... BufferedArrowDataset().shape Show source in arrow.py:250 returns the shape of the dataset (number of rows and columns) Signature @property def shape ( self ) -> Tuple [ int , int ]: ... BufferedArrowDataset().split Show source in arrow.py:273 returns the information about how the dataset has been split Signature def split ( self ): ... BufferedArrowDataset().version Show source in arrow.py:277 returns the version of the dataset Signature def version ( self ) -> str : ... IterableArrowDataset Show source in arrow.py:11 This class represents a dataset stored in a pyarrow Table or pandas DataFrame. It provides methods for accessing and iterating over the data, as well as for saving and loading the dataset to and from disk. Properties: - shape (Tuple[int, int]): The shape of the dataset (number of rows and columns). - num_rows (int): The number of rows in the dataset. - num_cols (int): The number of columns in the dataset. - schema (pyarrow.Schema): The schema of the table and its columns. - columns (List[pa.ChunkedArray]): A list of all columns in numerical order. Methods - data() - Return the underlying pyarrow Table or pandas DataFrame. - info() - Return the metadata about the dataset. - split() - Return the information about how the dataset has been split. - version() - Return the version of the dataset. - len () - Return the number of rows in the dataset. - getitem (uid) - Return the row with the given unique identifier. itercolumns( args, *kwargs): Iterate over all columns in their numerical order. - iter () - Iterate over the rows of the dataset, yielding a dictionary for each row. - save_to_disk(path - str): Save the dataset to disk at the specified path. - load_from_disk(path - str): Load the dataset from disk from the specified path. Signature class IterableArrowDataset ( Dataset ): def __init__ ( self , table : Union [ pyarrow . Table , pandas . DataFrame ], info : Optional [ DatasetInfo ] = None , split : Optional [ Union [ str , NamedSplit ]] = None , ): ... IterableArrowDataset(). getitem Show source in arrow.py:143 Return the row with the given unique identifier. Arguments uid - The unique identifier of the row to return. :type uid: int or slice kawrgs - Additional keyword arguments. :type kawrgs: Any Returns The row with the given unique identifier. Type: Dict[str, Any] Signature def __getitem__ ( self , uid : int , ** kawrgs : Any ) -> Dict [ str , Any ]: ... IterableArrowDataset(). iter Show source in arrow.py:178 Iterator over the rows of the dataset, yielding a dictionary for each row. Returns An iterator over the rows of the dataset, yielding a dictionary for each row. Type: Iterable[Dict] Signature def __iter__ ( self ) -> Iterable [ Dict ]: ... IterableArrowDataset(). len Show source in arrow.py:139 returns the number of rows in the dataset Signature def __len__ ( self ) -> int : ... IterableArrowDataset(). repr Show source in arrow.py:189 returns a string representation of the dataset Signature def __repr__ ( self ): ... IterableArrowDataset(). version Show source in arrow.py:135 returns the version of the dataset Signature def __version__ ( self ) -> str : ... IterableArrowDataset().columns Show source in arrow.py:104 Columns of the dataset. Returns A list of all columns in numerical order. Type: List[pyarrow.ChunkedArray] Signature @property def columns ( self ) -> List [ pyarrow . ChunkedArray ]: ... IterableArrowDataset().data Show source in arrow.py:114 Return the underlying pyarrow Table or pandas DataFrame. Returns The underlying pyarrow Table or pandas DataFrame. Type: Union[pyarrow.Table, pandas.DataFrame] Signature def data ( self ) -> Union [ pyarrow . Table , pandas . DataFrame ]: ... IterableArrowDataset().info Show source in arrow.py:123 returns the metadata about the dataset Signature def info ( self ) -> DatasetInfo : ... IterableArrowDataset().itercolumns Show source in arrow.py:167 Iterator over all columns in their numerical order. Arguments args - Additional arguments. :type args: Any kwargs - Additional keyword arguments. :type kwargs: Any Signature def itercolumns ( self , * args : Any , ** kwargs : Any ) -> Iterable : ... IterableArrowDataset().load_from_disk Show source in arrow.py:197 loads the dataset from disk from the specified path Signature def load_from_disk ( self , path : str ): ... IterableArrowDataset().num_cols Show source in arrow.py:89 returns the number of columns in the dataset Signature @property def num_cols ( self ) -> int : ... IterableArrowDataset().num_rows Show source in arrow.py:84 returns the number of rows in the dataset Signature @property def num_rows ( self ) -> int : ... IterableArrowDataset.pyarrow_typer Show source in arrow.py:58 Recognize the type of the data and find the according pyarrow type. Arguments IterableArrowDataset().data - The data to recognize the type of. :type data: Any Returns The pyarrow type of the data. Type: pyarrow.DataType Signature @staticmethod def pyarrow_typer ( data : Any ) -> pyarrow . DataType : ... IterableArrowDataset().save_to_disk Show source in arrow.py:193 saves the dataset to disk at the specified path Signature def save_to_disk ( self , path : str ): ... IterableArrowDataset().schema Show source in arrow.py:94 Schema of the table and its columns. Returns The schema of the table and its columns. Type: pyarrow.Schema Signature @property def schema ( self ) -> pyarrow . Schema : ... IterableArrowDataset().shape Show source in arrow.py:79 returns the shape of the dataset (number of rows and columns) Signature @property def shape ( self ) -> Tuple [ int , int ]: ... IterableArrowDataset().split Show source in arrow.py:127 returns the information about how the dataset has been split Signature def split ( self ) -> NamedSplit : ... IterableArrowDataset().version Show source in arrow.py:131 returns the version of the dataset Signature def version ( self ) -> str : ...","title":"Arrow"},{"location":"alfred/data/arrow/#arrow","text":"alfred Index / Alfred / Data / Arrow Auto-generated documentation for alfred.data.arrow module. Arrow BufferedArrowDataset BufferedArrowDataset(). getitem BufferedArrowDataset(). iter BufferedArrowDataset(). len BufferedArrowDataset(). repr BufferedArrowDataset(). version BufferedArrowDataset().data BufferedArrowDataset().info BufferedArrowDataset().load_from_disk BufferedArrowDataset().num_cols BufferedArrowDataset().num_rows BufferedArrowDataset().save_to_disk BufferedArrowDataset().shape BufferedArrowDataset().split BufferedArrowDataset().version IterableArrowDataset IterableArrowDataset(). getitem IterableArrowDataset(). iter IterableArrowDataset(). len IterableArrowDataset(). repr IterableArrowDataset(). version IterableArrowDataset().columns IterableArrowDataset().data IterableArrowDataset().info IterableArrowDataset().itercolumns IterableArrowDataset().load_from_disk IterableArrowDataset().num_cols IterableArrowDataset().num_rows IterableArrowDataset.pyarrow_typer IterableArrowDataset().save_to_disk IterableArrowDataset().schema IterableArrowDataset().shape IterableArrowDataset().split IterableArrowDataset().version","title":"Arrow"},{"location":"alfred/data/arrow/#bufferedarrowdataset","text":"Show source in arrow.py:202 This class represents a dataset stored in a pyarrow buffer. It provides methods for accessing and iterating over the data, as well as for saving and loading the dataset to and from disk. This will be very useful for datasets that are too large to fit into memory. Properties: shape (Tuple[int, int]): The shape of the dataset (number of rows and columns). num_rows (int): The number of rows in the dataset. num_cols (int): The number of columns in the dataset.","title":"BufferedArrowDataset"},{"location":"alfred/data/arrow/#methods","text":"- data() - Return the underlying pyarrow Table. - info() - Return the metadata about the dataset. - split() - Return the information about how the dataset has been split. - version() - Return the version of the dataset. - len () - Return the number of rows in the dataset. - getitem (uid) - Return the row with the given unique identifier. - iter () - Iterate over the rows of the dataset, yielding a dictionary for each row. - save_to_disk(path - str): Save the dataset to disk at the specified path. - load_from_disk(path - str): Load the dataset from disk from the specified path.","title":"Methods"},{"location":"alfred/data/arrow/#signature","text":"class BufferedArrowDataset ( Dataset ): def __init__ ( self , buffer : pyarrow . Buffer , info : Optional [ DatasetInfo ] = None , split : Optional [ Union [ str , NamedSplit ]] = None , ): ...","title":"Signature"},{"location":"alfred/data/arrow/#bufferedarrowdatasetgetitem","text":"Show source in arrow.py:289 Retuns the row with the given unique identifier.","title":"BufferedArrowDataset().getitem"},{"location":"alfred/data/arrow/#arguments","text":"uid - The unique identifier of the row to return. :type uid: int or slice kawrgs - Additional keyword arguments. :type kawrgs: Any","title":"Arguments"},{"location":"alfred/data/arrow/#returns","text":"The row with the given unique identifier. Type: Dict[str, Any]","title":"Returns"},{"location":"alfred/data/arrow/#signature_1","text":"def __getitem__ ( self , uid : int , ** kawrgs : Any ) -> Dict [ str , Any ]: ...","title":"Signature"},{"location":"alfred/data/arrow/#bufferedarrowdatasetiter","text":"Show source in arrow.py:302 Iterator over the rows of the dataset, yielding a dictionary for each row.","title":"BufferedArrowDataset().iter"},{"location":"alfred/data/arrow/#returns_1","text":"An iterator over the rows of the dataset, yielding a dictionary for each row. Type: Iterable","title":"Returns"},{"location":"alfred/data/arrow/#signature_2","text":"def __iter__ ( self ) -> Iterable : ...","title":"Signature"},{"location":"alfred/data/arrow/#bufferedarrowdatasetlen","text":"Show source in arrow.py:285 returns the number of rows in the dataset","title":"BufferedArrowDataset().len"},{"location":"alfred/data/arrow/#signature_3","text":"def __len__ ( self ) -> int : ...","title":"Signature"},{"location":"alfred/data/arrow/#bufferedarrowdatasetrepr","text":"Show source in arrow.py:313 returns a string representation of the dataset","title":"BufferedArrowDataset().repr"},{"location":"alfred/data/arrow/#signature_4","text":"def __repr__ ( self ): ...","title":"Signature"},{"location":"alfred/data/arrow/#bufferedarrowdatasetversion","text":"Show source in arrow.py:281 returns the version of the dataset","title":"BufferedArrowDataset().version"},{"location":"alfred/data/arrow/#signature_5","text":"def __version__ ( self ) -> str : ...","title":"Signature"},{"location":"alfred/data/arrow/#bufferedarrowdatasetdata","text":"Show source in arrow.py:265 returns the underlying pyarrow Table","title":"BufferedArrowDataset().data"},{"location":"alfred/data/arrow/#signature_6","text":"def data ( self ): ...","title":"Signature"},{"location":"alfred/data/arrow/#bufferedarrowdatasetinfo","text":"Show source in arrow.py:269 returns the metadata about the dataset","title":"BufferedArrowDataset().info"},{"location":"alfred/data/arrow/#signature_7","text":"def info ( self ): ...","title":"Signature"},{"location":"alfred/data/arrow/#bufferedarrowdatasetload_from_disk","text":"Show source in arrow.py:321 loads the dataset from disk from the specified path","title":"BufferedArrowDataset().load_from_disk"},{"location":"alfred/data/arrow/#signature_8","text":"def load_from_disk ( self , path : str ): ...","title":"Signature"},{"location":"alfred/data/arrow/#bufferedarrowdatasetnum_cols","text":"Show source in arrow.py:260 returns the number of columns in the dataset","title":"BufferedArrowDataset().num_cols"},{"location":"alfred/data/arrow/#signature_9","text":"@property def num_cols ( self ) -> int : ...","title":"Signature"},{"location":"alfred/data/arrow/#bufferedarrowdatasetnum_rows","text":"Show source in arrow.py:255 returns the number of rows in the dataset","title":"BufferedArrowDataset().num_rows"},{"location":"alfred/data/arrow/#signature_10","text":"@property def num_rows ( self ) -> int : ...","title":"Signature"},{"location":"alfred/data/arrow/#bufferedarrowdatasetsave_to_disk","text":"Show source in arrow.py:317 saves the dataset to disk at the specified path","title":"BufferedArrowDataset().save_to_disk"},{"location":"alfred/data/arrow/#signature_11","text":"def save_to_disk ( self , path : str ): ...","title":"Signature"},{"location":"alfred/data/arrow/#bufferedarrowdatasetshape","text":"Show source in arrow.py:250 returns the shape of the dataset (number of rows and columns)","title":"BufferedArrowDataset().shape"},{"location":"alfred/data/arrow/#signature_12","text":"@property def shape ( self ) -> Tuple [ int , int ]: ...","title":"Signature"},{"location":"alfred/data/arrow/#bufferedarrowdatasetsplit","text":"Show source in arrow.py:273 returns the information about how the dataset has been split","title":"BufferedArrowDataset().split"},{"location":"alfred/data/arrow/#signature_13","text":"def split ( self ): ...","title":"Signature"},{"location":"alfred/data/arrow/#bufferedarrowdatasetversion_1","text":"Show source in arrow.py:277 returns the version of the dataset","title":"BufferedArrowDataset().version"},{"location":"alfred/data/arrow/#signature_14","text":"def version ( self ) -> str : ...","title":"Signature"},{"location":"alfred/data/arrow/#iterablearrowdataset","text":"Show source in arrow.py:11 This class represents a dataset stored in a pyarrow Table or pandas DataFrame. It provides methods for accessing and iterating over the data, as well as for saving and loading the dataset to and from disk. Properties: - shape (Tuple[int, int]): The shape of the dataset (number of rows and columns). - num_rows (int): The number of rows in the dataset. - num_cols (int): The number of columns in the dataset. - schema (pyarrow.Schema): The schema of the table and its columns. - columns (List[pa.ChunkedArray]): A list of all columns in numerical order.","title":"IterableArrowDataset"},{"location":"alfred/data/arrow/#methods_1","text":"- data() - Return the underlying pyarrow Table or pandas DataFrame. - info() - Return the metadata about the dataset. - split() - Return the information about how the dataset has been split. - version() - Return the version of the dataset. - len () - Return the number of rows in the dataset. - getitem (uid) - Return the row with the given unique identifier. itercolumns( args, *kwargs): Iterate over all columns in their numerical order. - iter () - Iterate over the rows of the dataset, yielding a dictionary for each row. - save_to_disk(path - str): Save the dataset to disk at the specified path. - load_from_disk(path - str): Load the dataset from disk from the specified path.","title":"Methods"},{"location":"alfred/data/arrow/#signature_15","text":"class IterableArrowDataset ( Dataset ): def __init__ ( self , table : Union [ pyarrow . Table , pandas . DataFrame ], info : Optional [ DatasetInfo ] = None , split : Optional [ Union [ str , NamedSplit ]] = None , ): ...","title":"Signature"},{"location":"alfred/data/arrow/#iterablearrowdatasetgetitem","text":"Show source in arrow.py:143 Return the row with the given unique identifier.","title":"IterableArrowDataset().getitem"},{"location":"alfred/data/arrow/#arguments_1","text":"uid - The unique identifier of the row to return. :type uid: int or slice kawrgs - Additional keyword arguments. :type kawrgs: Any","title":"Arguments"},{"location":"alfred/data/arrow/#returns_2","text":"The row with the given unique identifier. Type: Dict[str, Any]","title":"Returns"},{"location":"alfred/data/arrow/#signature_16","text":"def __getitem__ ( self , uid : int , ** kawrgs : Any ) -> Dict [ str , Any ]: ...","title":"Signature"},{"location":"alfred/data/arrow/#iterablearrowdatasetiter","text":"Show source in arrow.py:178 Iterator over the rows of the dataset, yielding a dictionary for each row.","title":"IterableArrowDataset().iter"},{"location":"alfred/data/arrow/#returns_3","text":"An iterator over the rows of the dataset, yielding a dictionary for each row. Type: Iterable[Dict]","title":"Returns"},{"location":"alfred/data/arrow/#signature_17","text":"def __iter__ ( self ) -> Iterable [ Dict ]: ...","title":"Signature"},{"location":"alfred/data/arrow/#iterablearrowdatasetlen","text":"Show source in arrow.py:139 returns the number of rows in the dataset","title":"IterableArrowDataset().len"},{"location":"alfred/data/arrow/#signature_18","text":"def __len__ ( self ) -> int : ...","title":"Signature"},{"location":"alfred/data/arrow/#iterablearrowdatasetrepr","text":"Show source in arrow.py:189 returns a string representation of the dataset","title":"IterableArrowDataset().repr"},{"location":"alfred/data/arrow/#signature_19","text":"def __repr__ ( self ): ...","title":"Signature"},{"location":"alfred/data/arrow/#iterablearrowdatasetversion","text":"Show source in arrow.py:135 returns the version of the dataset","title":"IterableArrowDataset().version"},{"location":"alfred/data/arrow/#signature_20","text":"def __version__ ( self ) -> str : ...","title":"Signature"},{"location":"alfred/data/arrow/#iterablearrowdatasetcolumns","text":"Show source in arrow.py:104 Columns of the dataset.","title":"IterableArrowDataset().columns"},{"location":"alfred/data/arrow/#returns_4","text":"A list of all columns in numerical order. Type: List[pyarrow.ChunkedArray]","title":"Returns"},{"location":"alfred/data/arrow/#signature_21","text":"@property def columns ( self ) -> List [ pyarrow . ChunkedArray ]: ...","title":"Signature"},{"location":"alfred/data/arrow/#iterablearrowdatasetdata","text":"Show source in arrow.py:114 Return the underlying pyarrow Table or pandas DataFrame.","title":"IterableArrowDataset().data"},{"location":"alfred/data/arrow/#returns_5","text":"The underlying pyarrow Table or pandas DataFrame. Type: Union[pyarrow.Table, pandas.DataFrame]","title":"Returns"},{"location":"alfred/data/arrow/#signature_22","text":"def data ( self ) -> Union [ pyarrow . Table , pandas . DataFrame ]: ...","title":"Signature"},{"location":"alfred/data/arrow/#iterablearrowdatasetinfo","text":"Show source in arrow.py:123 returns the metadata about the dataset","title":"IterableArrowDataset().info"},{"location":"alfred/data/arrow/#signature_23","text":"def info ( self ) -> DatasetInfo : ...","title":"Signature"},{"location":"alfred/data/arrow/#iterablearrowdatasetitercolumns","text":"Show source in arrow.py:167 Iterator over all columns in their numerical order.","title":"IterableArrowDataset().itercolumns"},{"location":"alfred/data/arrow/#arguments_2","text":"args - Additional arguments. :type args: Any kwargs - Additional keyword arguments. :type kwargs: Any","title":"Arguments"},{"location":"alfred/data/arrow/#signature_24","text":"def itercolumns ( self , * args : Any , ** kwargs : Any ) -> Iterable : ...","title":"Signature"},{"location":"alfred/data/arrow/#iterablearrowdatasetload_from_disk","text":"Show source in arrow.py:197 loads the dataset from disk from the specified path","title":"IterableArrowDataset().load_from_disk"},{"location":"alfred/data/arrow/#signature_25","text":"def load_from_disk ( self , path : str ): ...","title":"Signature"},{"location":"alfred/data/arrow/#iterablearrowdatasetnum_cols","text":"Show source in arrow.py:89 returns the number of columns in the dataset","title":"IterableArrowDataset().num_cols"},{"location":"alfred/data/arrow/#signature_26","text":"@property def num_cols ( self ) -> int : ...","title":"Signature"},{"location":"alfred/data/arrow/#iterablearrowdatasetnum_rows","text":"Show source in arrow.py:84 returns the number of rows in the dataset","title":"IterableArrowDataset().num_rows"},{"location":"alfred/data/arrow/#signature_27","text":"@property def num_rows ( self ) -> int : ...","title":"Signature"},{"location":"alfred/data/arrow/#iterablearrowdatasetpyarrow_typer","text":"Show source in arrow.py:58 Recognize the type of the data and find the according pyarrow type.","title":"IterableArrowDataset.pyarrow_typer"},{"location":"alfred/data/arrow/#arguments_3","text":"IterableArrowDataset().data - The data to recognize the type of. :type data: Any","title":"Arguments"},{"location":"alfred/data/arrow/#returns_6","text":"The pyarrow type of the data. Type: pyarrow.DataType","title":"Returns"},{"location":"alfred/data/arrow/#signature_28","text":"@staticmethod def pyarrow_typer ( data : Any ) -> pyarrow . DataType : ...","title":"Signature"},{"location":"alfred/data/arrow/#iterablearrowdatasetsave_to_disk","text":"Show source in arrow.py:193 saves the dataset to disk at the specified path","title":"IterableArrowDataset().save_to_disk"},{"location":"alfred/data/arrow/#signature_29","text":"def save_to_disk ( self , path : str ): ...","title":"Signature"},{"location":"alfred/data/arrow/#iterablearrowdatasetschema","text":"Show source in arrow.py:94 Schema of the table and its columns.","title":"IterableArrowDataset().schema"},{"location":"alfred/data/arrow/#returns_7","text":"The schema of the table and its columns. Type: pyarrow.Schema","title":"Returns"},{"location":"alfred/data/arrow/#signature_30","text":"@property def schema ( self ) -> pyarrow . Schema : ...","title":"Signature"},{"location":"alfred/data/arrow/#iterablearrowdatasetshape","text":"Show source in arrow.py:79 returns the shape of the dataset (number of rows and columns)","title":"IterableArrowDataset().shape"},{"location":"alfred/data/arrow/#signature_31","text":"@property def shape ( self ) -> Tuple [ int , int ]: ...","title":"Signature"},{"location":"alfred/data/arrow/#iterablearrowdatasetsplit","text":"Show source in arrow.py:127 returns the information about how the dataset has been split","title":"IterableArrowDataset().split"},{"location":"alfred/data/arrow/#signature_32","text":"def split ( self ) -> NamedSplit : ...","title":"Signature"},{"location":"alfred/data/arrow/#iterablearrowdatasetversion_1","text":"Show source in arrow.py:131 returns the version of the dataset","title":"IterableArrowDataset().version"},{"location":"alfred/data/arrow/#signature_33","text":"def version ( self ) -> str : ...","title":"Signature"},{"location":"alfred/data/dataset/","text":"Dataset alfred Index / Alfred / Data / Dataset Auto-generated documentation for alfred.data.dataset module. Dataset Dataset Dataset(). getitem Dataset(). iter Dataset(). len Dataset(). version Dataset().data Dataset().info Dataset.load_from_disk Dataset.save_to_disk Dataset().split Dataset().version Dataset Show source in dataset.py:4 This is a generic interface for dataset classes that mirrors key interfaces from huggingface datasets. It provides methods for accessing and iterating over the data, as well as for saving and loading the dataset to and from disk. Properties: shape (Tuple[int, int]): The shape of the dataset (number of rows and columns). info (DatasetInfo): The metadata of the dataset. split (NamedSplit): The information about how the dataset has been split. version (str): The version of the dataset. Methods - data() - Return the underlying data. - info() - Return the metadata about the dataset. - split() - Return the information about how the dataset has been split. - len () - Return the number of rows in the dataset. - getitem (uid) - Return the row with the given unique identifier. - iter () - Iterate over the rows of the dataset. - version () - Return the version of the dataset. - version - Return the version of the dataset. - save_to_disk(path - str): Save the dataset to disk at the specified path. - load_from_disk(path - str): Load the dataset from disk from the specified path. Signature class Dataset ( abc . ABC ): ... Dataset(). getitem Show source in dataset.py:52 returns the row with the given unique identifier Signature @abc . abstractmethod def __getitem__ ( self , uid , ** kawrgs ): ... Dataset(). iter Show source in dataset.py:57 iterates over the rows of the dataset Signature @abc . abstractmethod def __iter__ ( self ): ... Dataset(). len Show source in dataset.py:47 returns the number of rows in the dataset Signature @abc . abstractmethod def __len__ ( self ) -> int : ... Dataset(). version Show source in dataset.py:62 returns the version of the dataset Signature @abc . abstractmethod def __version__ ( self ) -> str : ... Dataset().data Show source in dataset.py:29 returns the underlying data Signature @property @abc . abstractmethod def data ( self ): ... Dataset().info Show source in dataset.py:35 returns the metadata about the dataset Signature @property @abc . abstractmethod def info ( self ): ... Dataset.load_from_disk Show source in dataset.py:77 loads the dataset from disk from the specified path Signature @staticmethod def load_from_disk ( self , path : str ): ... Dataset.save_to_disk Show source in dataset.py:72 saves the dataset to disk at the specified path Signature @staticmethod def save_to_disk ( self , path : str ): ... Dataset().split Show source in dataset.py:41 returns the information about how the dataset has been split Signature @property @abc . abstractmethod def split ( self ): ... Dataset().version Show source in dataset.py:67 returns the version of the dataset Signature @property def version ( self ) -> str : ...","title":"Dataset"},{"location":"alfred/data/dataset/#dataset","text":"alfred Index / Alfred / Data / Dataset Auto-generated documentation for alfred.data.dataset module. Dataset Dataset Dataset(). getitem Dataset(). iter Dataset(). len Dataset(). version Dataset().data Dataset().info Dataset.load_from_disk Dataset.save_to_disk Dataset().split Dataset().version","title":"Dataset"},{"location":"alfred/data/dataset/#dataset_1","text":"Show source in dataset.py:4 This is a generic interface for dataset classes that mirrors key interfaces from huggingface datasets. It provides methods for accessing and iterating over the data, as well as for saving and loading the dataset to and from disk. Properties: shape (Tuple[int, int]): The shape of the dataset (number of rows and columns). info (DatasetInfo): The metadata of the dataset. split (NamedSplit): The information about how the dataset has been split. version (str): The version of the dataset.","title":"Dataset"},{"location":"alfred/data/dataset/#methods","text":"- data() - Return the underlying data. - info() - Return the metadata about the dataset. - split() - Return the information about how the dataset has been split. - len () - Return the number of rows in the dataset. - getitem (uid) - Return the row with the given unique identifier. - iter () - Iterate over the rows of the dataset. - version () - Return the version of the dataset. - version - Return the version of the dataset. - save_to_disk(path - str): Save the dataset to disk at the specified path. - load_from_disk(path - str): Load the dataset from disk from the specified path.","title":"Methods"},{"location":"alfred/data/dataset/#signature","text":"class Dataset ( abc . ABC ): ...","title":"Signature"},{"location":"alfred/data/dataset/#datasetgetitem","text":"Show source in dataset.py:52 returns the row with the given unique identifier","title":"Dataset().getitem"},{"location":"alfred/data/dataset/#signature_1","text":"@abc . abstractmethod def __getitem__ ( self , uid , ** kawrgs ): ...","title":"Signature"},{"location":"alfred/data/dataset/#datasetiter","text":"Show source in dataset.py:57 iterates over the rows of the dataset","title":"Dataset().iter"},{"location":"alfred/data/dataset/#signature_2","text":"@abc . abstractmethod def __iter__ ( self ): ...","title":"Signature"},{"location":"alfred/data/dataset/#datasetlen","text":"Show source in dataset.py:47 returns the number of rows in the dataset","title":"Dataset().len"},{"location":"alfred/data/dataset/#signature_3","text":"@abc . abstractmethod def __len__ ( self ) -> int : ...","title":"Signature"},{"location":"alfred/data/dataset/#datasetversion","text":"Show source in dataset.py:62 returns the version of the dataset","title":"Dataset().version"},{"location":"alfred/data/dataset/#signature_4","text":"@abc . abstractmethod def __version__ ( self ) -> str : ...","title":"Signature"},{"location":"alfred/data/dataset/#datasetdata","text":"Show source in dataset.py:29 returns the underlying data","title":"Dataset().data"},{"location":"alfred/data/dataset/#signature_5","text":"@property @abc . abstractmethod def data ( self ): ...","title":"Signature"},{"location":"alfred/data/dataset/#datasetinfo","text":"Show source in dataset.py:35 returns the metadata about the dataset","title":"Dataset().info"},{"location":"alfred/data/dataset/#signature_6","text":"@property @abc . abstractmethod def info ( self ): ...","title":"Signature"},{"location":"alfred/data/dataset/#datasetload_from_disk","text":"Show source in dataset.py:77 loads the dataset from disk from the specified path","title":"Dataset.load_from_disk"},{"location":"alfred/data/dataset/#signature_7","text":"@staticmethod def load_from_disk ( self , path : str ): ...","title":"Signature"},{"location":"alfred/data/dataset/#datasetsave_to_disk","text":"Show source in dataset.py:72 saves the dataset to disk at the specified path","title":"Dataset.save_to_disk"},{"location":"alfred/data/dataset/#signature_8","text":"@staticmethod def save_to_disk ( self , path : str ): ...","title":"Signature"},{"location":"alfred/data/dataset/#datasetsplit","text":"Show source in dataset.py:41 returns the information about how the dataset has been split","title":"Dataset().split"},{"location":"alfred/data/dataset/#signature_9","text":"@property @abc . abstractmethod def split ( self ): ...","title":"Signature"},{"location":"alfred/data/dataset/#datasetversion_1","text":"Show source in dataset.py:67 returns the version of the dataset","title":"Dataset().version"},{"location":"alfred/data/dataset/#signature_10","text":"@property def version ( self ) -> str : ...","title":"Signature"},{"location":"alfred/data/wrench/","text":"Wrench alfred Index / Alfred / Data / Wrench Auto-generated documentation for alfred.data.wrench module. Wrench WrenchBenchmarkDataset WrenchBenchmarkDataset(). getattr WrenchBenchmarkDataset(). repr WrenchBenchmarkDataset Show source in wrench.py:28 Dataset wrapper for Wrench Dataset. This wrapper class inherits from IterableArrowDataset Wrench is a benchmark platform containing diverse weak supervision tasks. @inproceedings{ zhang2021wrench, title={{WRENCH}: A Comprehensive Benchmark for Weak Supervision}, author={Jieyu Zhang and Yue Yu and Yinghao Li and Yujing Wang and Yaming Yang and Mao Yang and Alexander Ratner}, booktitle={Thirty-fifth Conference on Neural Information Processing Systems Datasets and Benchmarks Track}, year={2021}, url={https://openreview.net/forum?id=Q9SKS5k8io} } Signature class WrenchBenchmarkDataset ( IterableArrowDataset ): def __init__ ( self , dataset_name : str , split : str = \"train\" , local_path : Optional [ str ] = None ): ... WrenchBenchmarkDataset(). getattr Show source in wrench.py:132 returns the data instance with the given uid Signature def __getattr__ ( self , uid ): ... WrenchBenchmarkDataset(). repr Show source in wrench.py:136 returns the string representation of the dataset Signature def __repr__ ( self ): ...","title":"Wrench"},{"location":"alfred/data/wrench/#wrench","text":"alfred Index / Alfred / Data / Wrench Auto-generated documentation for alfred.data.wrench module. Wrench WrenchBenchmarkDataset WrenchBenchmarkDataset(). getattr WrenchBenchmarkDataset(). repr","title":"Wrench"},{"location":"alfred/data/wrench/#wrenchbenchmarkdataset","text":"Show source in wrench.py:28 Dataset wrapper for Wrench Dataset. This wrapper class inherits from IterableArrowDataset Wrench is a benchmark platform containing diverse weak supervision tasks. @inproceedings{ zhang2021wrench, title={{WRENCH}: A Comprehensive Benchmark for Weak Supervision}, author={Jieyu Zhang and Yue Yu and Yinghao Li and Yujing Wang and Yaming Yang and Mao Yang and Alexander Ratner}, booktitle={Thirty-fifth Conference on Neural Information Processing Systems Datasets and Benchmarks Track}, year={2021}, url={https://openreview.net/forum?id=Q9SKS5k8io} }","title":"WrenchBenchmarkDataset"},{"location":"alfred/data/wrench/#signature","text":"class WrenchBenchmarkDataset ( IterableArrowDataset ): def __init__ ( self , dataset_name : str , split : str = \"train\" , local_path : Optional [ str ] = None ): ...","title":"Signature"},{"location":"alfred/data/wrench/#wrenchbenchmarkdatasetgetattr","text":"Show source in wrench.py:132 returns the data instance with the given uid","title":"WrenchBenchmarkDataset().getattr"},{"location":"alfred/data/wrench/#signature_1","text":"def __getattr__ ( self , uid ): ...","title":"Signature"},{"location":"alfred/data/wrench/#wrenchbenchmarkdatasetrepr","text":"Show source in wrench.py:136 returns the string representation of the dataset","title":"WrenchBenchmarkDataset().repr"},{"location":"alfred/data/wrench/#signature_2","text":"def __repr__ ( self ): ...","title":"Signature"},{"location":"alfred/fm/","text":"Fm alfred Index / Alfred / Fm Auto-generated documentation for alfred.fm module. Fm Modules Modules Dummy Huggingface Model Openai Query Remote Response Utils","title":"Fm"},{"location":"alfred/fm/#fm","text":"alfred Index / Alfred / Fm Auto-generated documentation for alfred.fm module. Fm Modules","title":"Fm"},{"location":"alfred/fm/#modules","text":"Dummy Huggingface Model Openai Query Remote Response Utils","title":"Modules"},{"location":"alfred/fm/dummy/","text":"Dummy alfred Index / Alfred / Fm / Dummy Auto-generated documentation for alfred.fm.dummy module. Dummy DummyModel DummyModel Show source in dummy.py:11 A dummy model that returns the input as the output. This model implements a dummy model that returns the input as the output for both completion and outputs a raw logit of -1 for scoring. Signature class DummyModel ( LocalAccessFoundationModel ): def __init__ ( self , model : Optional [ str ] = None ): ...","title":"Dummy"},{"location":"alfred/fm/dummy/#dummy","text":"alfred Index / Alfred / Fm / Dummy Auto-generated documentation for alfred.fm.dummy module. Dummy DummyModel","title":"Dummy"},{"location":"alfred/fm/dummy/#dummymodel","text":"Show source in dummy.py:11 A dummy model that returns the input as the output. This model implements a dummy model that returns the input as the output for both completion and outputs a raw logit of -1 for scoring.","title":"DummyModel"},{"location":"alfred/fm/dummy/#signature","text":"class DummyModel ( LocalAccessFoundationModel ): def __init__ ( self , model : Optional [ str ] = None ): ...","title":"Signature"},{"location":"alfred/fm/huggingface/","text":"Huggingface alfred Index / Alfred / Fm / Huggingface Auto-generated documentation for alfred.fm.huggingface module. Huggingface HuggingFaceModel HuggingFaceModel Show source in huggingface.py:40 The HuggingFaceModel class is a wrapper for HuggingFace models, including both Seq2Seq (Encoder-Decoder, e.g. T5, T0) and Causal (Autoregressive, e.g. GPT) Language Models. This wrapper supports several options for loading models, including specifying the data type, using a local path for the model hub, using a device map for parallelization, applying int8 quantization, and using custom tokenization. The interface includes implementations of the _score_batch method for ranking candidates and the _generate_batch method for generating prompts. Signature class HuggingFaceModel ( LocalAccessFoundationModel ): def __init__ ( self , model_string : str , dtype : str = \"auto\" , local_path : Optional [ str ] = None , device_map : Optional [ str ] = \"auto\" , int_8 : bool = False , tokenizer : Optional [ PreTrainedTokenizer ] = None , ): ...","title":"Huggingface"},{"location":"alfred/fm/huggingface/#huggingface","text":"alfred Index / Alfred / Fm / Huggingface Auto-generated documentation for alfred.fm.huggingface module. Huggingface HuggingFaceModel","title":"Huggingface"},{"location":"alfred/fm/huggingface/#huggingfacemodel","text":"Show source in huggingface.py:40 The HuggingFaceModel class is a wrapper for HuggingFace models, including both Seq2Seq (Encoder-Decoder, e.g. T5, T0) and Causal (Autoregressive, e.g. GPT) Language Models. This wrapper supports several options for loading models, including specifying the data type, using a local path for the model hub, using a device map for parallelization, applying int8 quantization, and using custom tokenization. The interface includes implementations of the _score_batch method for ranking candidates and the _generate_batch method for generating prompts.","title":"HuggingFaceModel"},{"location":"alfred/fm/huggingface/#signature","text":"class HuggingFaceModel ( LocalAccessFoundationModel ): def __init__ ( self , model_string : str , dtype : str = \"auto\" , local_path : Optional [ str ] = None , device_map : Optional [ str ] = \"auto\" , int_8 : bool = False , tokenizer : Optional [ PreTrainedTokenizer ] = None , ): ...","title":"Signature"},{"location":"alfred/fm/model/","text":"Model alfred Index / Alfred / Fm / Model Auto-generated documentation for alfred.fm.model module. Model APIAccessFoundationModel FoundationModel FoundationModel(). call FoundationModel().forward FoundationModel().generate FoundationModel().run FoundationModel().score LocalAccessFoundationModel APIAccessFoundationModel Show source in model.py:250 Signature class APIAccessFoundationModel ( FoundationModel ): def __init__ ( self , model_string : str , cfg : Optional [ Dict ] = None ): ... See also FoundationModel FoundationModel Show source in model.py:18 Generic interface for foundation model class Signature class FoundationModel ( abc . ABC ): ... FoundationModel(). call Show source in model.py:230 This function returns the output of the run function when the model is called as a function. It can be used as model(queries), which is equivalent to model.run(queries). Arguments queries - A single query or a list of queries :type queries: Union[Query, str, dict, List[Query], List[str], List[dict]] kwargs - Additional arguments to pass to the foundation model :type kwargs: Any Returns A single response or a list of responses Type: Union[str, Response, List[Response]] Signature def __call__ ( self , queries : Union [ Query , str , Tuple [ str , str ], List [ Query ], List [ str ]], ** kwargs : Any ) -> Union [ str , Response , List [ Response ]]: ... FoundationModel().forward Show source in model.py:59 This function is the main entry point for running queries through the foundation model. It accepts raw query content and automatically converts it into query objects. The function then determines whether to run the queries through the _generate_batch or _score_batch method based on the type of queries. Finally, the function processes the queries using one of two batching policies (dynamic, static) and passes them through the foundation model. Arguments queries - A list of queries :type queries: Union[List[Query], List[str], List[Tuple[str, str]]] batch_policy - The batching policy to use. Can be either 'dynamic' or 'static' :type batch_policy: str batch_size - The batch size to use for static batching or maximum batch size for dynamic batching :type batch_size: int FoundationModel().score - Whether to run the queries through the _score_batch() method :type score: bool kwargs - Additional arguments to pass to the foundation model :type kwargs: Any Returns A list of responses Type: Union[List[CompletionResponse], List[RankedResponse], List[OrderedDict]] Signature def forward ( self , queries : Union [ List [ Query ], List [ str ], List [ Tuple [ str , str ]]], batch_policy : str = \"dynamic\" , batch_size : int = 1024 , score : bool = False , ** kwargs ) -> Union [ List [ CompletionResponse ], List [ RankedResponse ], List [ OrderedDict ]]: ... FoundationModel().generate Show source in model.py:141 This function is a wrapper around the forward function for running CompletionQuery objects through the foundation model. It returns a list of CompletionResponse objects. Arguments queries - A list of CompletionQuery or raw query content (as string) :type queries: Union[List[CompletionQuery], List[str]] batch_policy - The batching policy to use. Can be either 'dynamic' or 'static' :type batch_policy: str batch_size - The batch size to use for static batching or maximum batch size for dynamic batching :type batch_size: int kwargs - Additional arguments to pass to the foundation model :type kwargs: Any Returns A list of CompletionResponse Type: List[CompletionResponse] Signature def generate ( self , queries : Union [ List [ CompletionQuery ], List [ str ]], batch_policy : str = \"dynamic\" , batch_size : int = 1024 , ** kwargs ) -> List [ CompletionResponse ]: ... FoundationModel().run Show source in model.py:195 This function is the main entry point for users to run queries through the foundation model. It accepts raw query content and automatically converts it into query objects. The function then processes the queries and returns the responses in the appropriate format. For single instance queries, a single response object is returned. Arguments queries - A single query or a list of queries :type queries: Union[Query, str, Tuple[str, str], List[Query], List[str]] kwargs - Additional arguments to pass to the foundation model :type kwargs: Any Returns A single response or a list of responses Type: Union[str, Response, List[Response]] Signature def run ( self , queries : Union [ Query , str , Tuple [ str , str ], List [ Query ], List [ str ]], ** kwargs : Any ) -> Union [ str , Response , List [ Response ]]: ... FoundationModel().score Show source in model.py:165 This function is a wrapper around the forward function for running RankedQuery objects through the foundation model. It returns a list of RankedResponse objects. Arguments queries - A list of RankedQuery :type queries: List[RankedQuery] batch_policy - The batching policy to use. Can be either 'dynamic' or 'static' :type batch_policy: str batch_size - The batch size to use for static batching or maximum batch size for dynamic batching :type batch_size: int kwargs - Additional arguments to pass to the foundation model :type kwargs: Any Returns A list of RankedResponse Type: List[RankedResponse] Signature def score ( self , queries : List [ RankedQuery ], batch_policy : str = \"dynamic\" , batch_size : int = 1024 , ** kwargs : Any ) -> List [ RankedResponse ]: ... LocalAccessFoundationModel Show source in model.py:267 Signature class LocalAccessFoundationModel ( FoundationModel ): def __init__ ( self , model_string : str , local_path : Optional [ str ] = None ): ... See also FoundationModel","title":"Model"},{"location":"alfred/fm/model/#model","text":"alfred Index / Alfred / Fm / Model Auto-generated documentation for alfred.fm.model module. Model APIAccessFoundationModel FoundationModel FoundationModel(). call FoundationModel().forward FoundationModel().generate FoundationModel().run FoundationModel().score LocalAccessFoundationModel","title":"Model"},{"location":"alfred/fm/model/#apiaccessfoundationmodel","text":"Show source in model.py:250","title":"APIAccessFoundationModel"},{"location":"alfred/fm/model/#signature","text":"class APIAccessFoundationModel ( FoundationModel ): def __init__ ( self , model_string : str , cfg : Optional [ Dict ] = None ): ...","title":"Signature"},{"location":"alfred/fm/model/#see-also","text":"FoundationModel","title":"See also"},{"location":"alfred/fm/model/#foundationmodel","text":"Show source in model.py:18 Generic interface for foundation model class","title":"FoundationModel"},{"location":"alfred/fm/model/#signature_1","text":"class FoundationModel ( abc . ABC ): ...","title":"Signature"},{"location":"alfred/fm/model/#foundationmodelcall","text":"Show source in model.py:230 This function returns the output of the run function when the model is called as a function. It can be used as model(queries), which is equivalent to model.run(queries).","title":"FoundationModel().call"},{"location":"alfred/fm/model/#arguments","text":"queries - A single query or a list of queries :type queries: Union[Query, str, dict, List[Query], List[str], List[dict]] kwargs - Additional arguments to pass to the foundation model :type kwargs: Any","title":"Arguments"},{"location":"alfred/fm/model/#returns","text":"A single response or a list of responses Type: Union[str, Response, List[Response]]","title":"Returns"},{"location":"alfred/fm/model/#signature_2","text":"def __call__ ( self , queries : Union [ Query , str , Tuple [ str , str ], List [ Query ], List [ str ]], ** kwargs : Any ) -> Union [ str , Response , List [ Response ]]: ...","title":"Signature"},{"location":"alfred/fm/model/#foundationmodelforward","text":"Show source in model.py:59 This function is the main entry point for running queries through the foundation model. It accepts raw query content and automatically converts it into query objects. The function then determines whether to run the queries through the _generate_batch or _score_batch method based on the type of queries. Finally, the function processes the queries using one of two batching policies (dynamic, static) and passes them through the foundation model.","title":"FoundationModel().forward"},{"location":"alfred/fm/model/#arguments_1","text":"queries - A list of queries :type queries: Union[List[Query], List[str], List[Tuple[str, str]]] batch_policy - The batching policy to use. Can be either 'dynamic' or 'static' :type batch_policy: str batch_size - The batch size to use for static batching or maximum batch size for dynamic batching :type batch_size: int FoundationModel().score - Whether to run the queries through the _score_batch() method :type score: bool kwargs - Additional arguments to pass to the foundation model :type kwargs: Any","title":"Arguments"},{"location":"alfred/fm/model/#returns_1","text":"A list of responses Type: Union[List[CompletionResponse], List[RankedResponse], List[OrderedDict]]","title":"Returns"},{"location":"alfred/fm/model/#signature_3","text":"def forward ( self , queries : Union [ List [ Query ], List [ str ], List [ Tuple [ str , str ]]], batch_policy : str = \"dynamic\" , batch_size : int = 1024 , score : bool = False , ** kwargs ) -> Union [ List [ CompletionResponse ], List [ RankedResponse ], List [ OrderedDict ]]: ...","title":"Signature"},{"location":"alfred/fm/model/#foundationmodelgenerate","text":"Show source in model.py:141 This function is a wrapper around the forward function for running CompletionQuery objects through the foundation model. It returns a list of CompletionResponse objects.","title":"FoundationModel().generate"},{"location":"alfred/fm/model/#arguments_2","text":"queries - A list of CompletionQuery or raw query content (as string) :type queries: Union[List[CompletionQuery], List[str]] batch_policy - The batching policy to use. Can be either 'dynamic' or 'static' :type batch_policy: str batch_size - The batch size to use for static batching or maximum batch size for dynamic batching :type batch_size: int kwargs - Additional arguments to pass to the foundation model :type kwargs: Any","title":"Arguments"},{"location":"alfred/fm/model/#returns_2","text":"A list of CompletionResponse Type: List[CompletionResponse]","title":"Returns"},{"location":"alfred/fm/model/#signature_4","text":"def generate ( self , queries : Union [ List [ CompletionQuery ], List [ str ]], batch_policy : str = \"dynamic\" , batch_size : int = 1024 , ** kwargs ) -> List [ CompletionResponse ]: ...","title":"Signature"},{"location":"alfred/fm/model/#foundationmodelrun","text":"Show source in model.py:195 This function is the main entry point for users to run queries through the foundation model. It accepts raw query content and automatically converts it into query objects. The function then processes the queries and returns the responses in the appropriate format. For single instance queries, a single response object is returned.","title":"FoundationModel().run"},{"location":"alfred/fm/model/#arguments_3","text":"queries - A single query or a list of queries :type queries: Union[Query, str, Tuple[str, str], List[Query], List[str]] kwargs - Additional arguments to pass to the foundation model :type kwargs: Any","title":"Arguments"},{"location":"alfred/fm/model/#returns_3","text":"A single response or a list of responses Type: Union[str, Response, List[Response]]","title":"Returns"},{"location":"alfred/fm/model/#signature_5","text":"def run ( self , queries : Union [ Query , str , Tuple [ str , str ], List [ Query ], List [ str ]], ** kwargs : Any ) -> Union [ str , Response , List [ Response ]]: ...","title":"Signature"},{"location":"alfred/fm/model/#foundationmodelscore","text":"Show source in model.py:165 This function is a wrapper around the forward function for running RankedQuery objects through the foundation model. It returns a list of RankedResponse objects.","title":"FoundationModel().score"},{"location":"alfred/fm/model/#arguments_4","text":"queries - A list of RankedQuery :type queries: List[RankedQuery] batch_policy - The batching policy to use. Can be either 'dynamic' or 'static' :type batch_policy: str batch_size - The batch size to use for static batching or maximum batch size for dynamic batching :type batch_size: int kwargs - Additional arguments to pass to the foundation model :type kwargs: Any","title":"Arguments"},{"location":"alfred/fm/model/#returns_4","text":"A list of RankedResponse Type: List[RankedResponse]","title":"Returns"},{"location":"alfred/fm/model/#signature_6","text":"def score ( self , queries : List [ RankedQuery ], batch_policy : str = \"dynamic\" , batch_size : int = 1024 , ** kwargs : Any ) -> List [ RankedResponse ]: ...","title":"Signature"},{"location":"alfred/fm/model/#localaccessfoundationmodel","text":"Show source in model.py:267","title":"LocalAccessFoundationModel"},{"location":"alfred/fm/model/#signature_7","text":"class LocalAccessFoundationModel ( FoundationModel ): def __init__ ( self , model_string : str , local_path : Optional [ str ] = None ): ...","title":"Signature"},{"location":"alfred/fm/model/#see-also_1","text":"FoundationModel","title":"See also"},{"location":"alfred/fm/openai/","text":"Openai alfred Index / Alfred / Fm / Openai Auto-generated documentation for alfred.fm.openai module. Openai OpenAIModel OpenAIModel Show source in openai.py:26 A wrapper for the OpenAI API. This class provides a wrapper for the OpenAI API for generating completions. Signature class OpenAIModel ( APIAccessFoundationModel ): def __init__ ( self , model_string : str = \"text-davinci-002\" , cfg : Optional [ Dict ] = None ): ...","title":"Openai"},{"location":"alfred/fm/openai/#openai","text":"alfred Index / Alfred / Fm / Openai Auto-generated documentation for alfred.fm.openai module. Openai OpenAIModel","title":"Openai"},{"location":"alfred/fm/openai/#openaimodel","text":"Show source in openai.py:26 A wrapper for the OpenAI API. This class provides a wrapper for the OpenAI API for generating completions.","title":"OpenAIModel"},{"location":"alfred/fm/openai/#signature","text":"class OpenAIModel ( APIAccessFoundationModel ): def __init__ ( self , model_string : str = \"text-davinci-002\" , cfg : Optional [ Dict ] = None ): ...","title":"Signature"},{"location":"alfred/fm/utils/","text":"Utils alfred Index / Alfred / Fm / Utils Auto-generated documentation for alfred.fm.utils module. Utils DynamicBatcher DynamicBatcher().batch DynamicBatcher().merge_rank_response DynamicBatcher().reorder clear_cuda_cache normalize_logits reorder_array DynamicBatcher Show source in utils.py:59 Signature class DynamicBatcher : def __init__ ( self , queries : Union [ List [ Query ], List [ str ]], max_batch_size : int = 2048 ): ... DynamicBatcher().batch Show source in utils.py:156 Batch a list of instances into a list of batches Signature def batch ( self ): ... DynamicBatcher().merge_rank_response Show source in utils.py:96 Assumption: Candidate Order is the same across all ranked queries Arguments responses - A list of responses to be merged softmax - Whether to apply softmax to the logits candidate_token_len - The length of the candidate in terms of tokens Returns A merged response Signature def merge_rank_response ( self , responses : List [ OrderedDict ], softmax : bool = True , candidate_token_len : Union [ List [ int ], int ] = 1 , ) -> RankedResponse : ... DynamicBatcher().reorder Show source in utils.py:127 Signature def reorder ( self , inst : List , offset : Optional [ int ] = None , candidate_token_len : Optional [ Union [ int , List [ int ]]] = None , ) -> List : ... clear_cuda_cache Show source in utils.py:15 Clear cuda cache via garbage collection Signature def clear_cuda_cache (): ... normalize_logits Show source in utils.py:23 Normalize raw logit scores from a foundation model. This function normalizes raw logit scores from a foundation model using the softmax function. Other normalization methods can be used in the future if needed. Arguments logits - The raw logit scores to be normalized. :type logits: torch.Tensor Returns The normalized logit scores. Type: torch.Tensor Signature def normalize_logits ( logits : torch . Tensor ) -> torch . Tensor : ... reorder_array Show source in utils.py:38 Reorder an array according to a given order. This function reorders the elements in an array according to the order specified by a separate array. Arguments arr - The array to be reordered. Can be a NumPy array, PyTorch tensor, or Python list. :type arr: Union[np.ndarray, torch.Tensor, list] order - The order array. Can be a NumPy array, PyTorch tensor, or Python list. :type order: Union[np.ndarray, torch.Tensor, list] Returns The reordered array. Has the same type as the input arr . Type: Union[np.ndarray, torch.Tensor, list] Signature def reorder_array ( arr : Union [ np . ndarray , torch . Tensor , list ], order : Union [ np . ndarray , torch . Tensor , list ], ) -> Union [ np . ndarray , torch . Tensor , list ]: ...","title":"Utils"},{"location":"alfred/fm/utils/#utils","text":"alfred Index / Alfred / Fm / Utils Auto-generated documentation for alfred.fm.utils module. Utils DynamicBatcher DynamicBatcher().batch DynamicBatcher().merge_rank_response DynamicBatcher().reorder clear_cuda_cache normalize_logits reorder_array","title":"Utils"},{"location":"alfred/fm/utils/#dynamicbatcher","text":"Show source in utils.py:59","title":"DynamicBatcher"},{"location":"alfred/fm/utils/#signature","text":"class DynamicBatcher : def __init__ ( self , queries : Union [ List [ Query ], List [ str ]], max_batch_size : int = 2048 ): ...","title":"Signature"},{"location":"alfred/fm/utils/#dynamicbatcherbatch","text":"Show source in utils.py:156 Batch a list of instances into a list of batches","title":"DynamicBatcher().batch"},{"location":"alfred/fm/utils/#signature_1","text":"def batch ( self ): ...","title":"Signature"},{"location":"alfred/fm/utils/#dynamicbatchermerge_rank_response","text":"Show source in utils.py:96 Assumption: Candidate Order is the same across all ranked queries","title":"DynamicBatcher().merge_rank_response"},{"location":"alfred/fm/utils/#arguments","text":"responses - A list of responses to be merged softmax - Whether to apply softmax to the logits candidate_token_len - The length of the candidate in terms of tokens","title":"Arguments"},{"location":"alfred/fm/utils/#returns","text":"A merged response","title":"Returns"},{"location":"alfred/fm/utils/#signature_2","text":"def merge_rank_response ( self , responses : List [ OrderedDict ], softmax : bool = True , candidate_token_len : Union [ List [ int ], int ] = 1 , ) -> RankedResponse : ...","title":"Signature"},{"location":"alfred/fm/utils/#dynamicbatcherreorder","text":"Show source in utils.py:127","title":"DynamicBatcher().reorder"},{"location":"alfred/fm/utils/#signature_3","text":"def reorder ( self , inst : List , offset : Optional [ int ] = None , candidate_token_len : Optional [ Union [ int , List [ int ]]] = None , ) -> List : ...","title":"Signature"},{"location":"alfred/fm/utils/#clear_cuda_cache","text":"Show source in utils.py:15 Clear cuda cache via garbage collection","title":"clear_cuda_cache"},{"location":"alfred/fm/utils/#signature_4","text":"def clear_cuda_cache (): ...","title":"Signature"},{"location":"alfred/fm/utils/#normalize_logits","text":"Show source in utils.py:23 Normalize raw logit scores from a foundation model. This function normalizes raw logit scores from a foundation model using the softmax function. Other normalization methods can be used in the future if needed.","title":"normalize_logits"},{"location":"alfred/fm/utils/#arguments_1","text":"logits - The raw logit scores to be normalized. :type logits: torch.Tensor","title":"Arguments"},{"location":"alfred/fm/utils/#returns_1","text":"The normalized logit scores. Type: torch.Tensor","title":"Returns"},{"location":"alfred/fm/utils/#signature_5","text":"def normalize_logits ( logits : torch . Tensor ) -> torch . Tensor : ...","title":"Signature"},{"location":"alfred/fm/utils/#reorder_array","text":"Show source in utils.py:38 Reorder an array according to a given order. This function reorders the elements in an array according to the order specified by a separate array.","title":"reorder_array"},{"location":"alfred/fm/utils/#arguments_2","text":"arr - The array to be reordered. Can be a NumPy array, PyTorch tensor, or Python list. :type arr: Union[np.ndarray, torch.Tensor, list] order - The order array. Can be a NumPy array, PyTorch tensor, or Python list. :type order: Union[np.ndarray, torch.Tensor, list]","title":"Arguments"},{"location":"alfred/fm/utils/#returns_2","text":"The reordered array. Has the same type as the input arr . Type: Union[np.ndarray, torch.Tensor, list]","title":"Returns"},{"location":"alfred/fm/utils/#signature_6","text":"def reorder_array ( arr : Union [ np . ndarray , torch . Tensor , list ], order : Union [ np . ndarray , torch . Tensor , list ], ) -> Union [ np . ndarray , torch . Tensor , list ]: ...","title":"Signature"},{"location":"alfred/fm/query/","text":"Query alfred Index / Alfred / Fm / Query Auto-generated documentation for alfred.fm.query module. Query Modules Modules CompletionQuery Query RankedQuery","title":"Query"},{"location":"alfred/fm/query/#query","text":"alfred Index / Alfred / Fm / Query Auto-generated documentation for alfred.fm.query module. Query Modules","title":"Query"},{"location":"alfred/fm/query/#modules","text":"CompletionQuery Query RankedQuery","title":"Modules"},{"location":"alfred/fm/query/completion_query/","text":"CompletionQuery alfred Index / Alfred / Fm / Query / CompletionQuery Auto-generated documentation for alfred.fm.query.completion_query module. CompletionQuery CompletionQuery CompletionQuery(). add CompletionQuery(). eq CompletionQuery(). hash CompletionQuery(). len CompletionQuery(). repr CompletionQuery(). str CompletionQuery().load CompletionQuery().prompt CompletionQuery Show source in completion_query.py:9 A completion query class. This is the generic query for any alfred.fm model. It mainly contains the prompt, which is the input to the model. This class represents a query for completion of a given prompt. It is initialized with a prompt, which can be a string, NumPy array, list, tuple, or PyTorch tensor. Signature class CompletionQuery ( Query ): def __init__ ( self , prompt : Union [ str , np . ndarray , List , Tuple , torch . Tensor ]): ... CompletionQuery(). add Show source in completion_query.py:61 concatenates the two queries Signature def __add__ ( self , other ): ... CompletionQuery(). eq Show source in completion_query.py:49 returns whether the two queries are equal Signature def __eq__ ( self , other ): ... CompletionQuery(). hash Show source in completion_query.py:53 returns the hash of the query Signature def __hash__ ( self ): ... CompletionQuery(). len Show source in completion_query.py:57 returns the length of the prompt Signature def __len__ ( self ): ... CompletionQuery(). repr Show source in completion_query.py:41 returns the string representation of the query Signature def __repr__ ( self ): ... CompletionQuery(). str Show source in completion_query.py:45 returns the string representation of the query Signature def __str__ ( self ): ... CompletionQuery().load Show source in completion_query.py:37 loads the prompt, this will be convenient for batching the queries Signature def load ( self ): ... CompletionQuery().prompt Show source in completion_query.py:32 returns the raw prompt content Signature @property def prompt ( self ): ...","title":"CompletionQuery"},{"location":"alfred/fm/query/completion_query/#completionquery","text":"alfred Index / Alfred / Fm / Query / CompletionQuery Auto-generated documentation for alfred.fm.query.completion_query module. CompletionQuery CompletionQuery CompletionQuery(). add CompletionQuery(). eq CompletionQuery(). hash CompletionQuery(). len CompletionQuery(). repr CompletionQuery(). str CompletionQuery().load CompletionQuery().prompt","title":"CompletionQuery"},{"location":"alfred/fm/query/completion_query/#completionquery_1","text":"Show source in completion_query.py:9 A completion query class. This is the generic query for any alfred.fm model. It mainly contains the prompt, which is the input to the model. This class represents a query for completion of a given prompt. It is initialized with a prompt, which can be a string, NumPy array, list, tuple, or PyTorch tensor.","title":"CompletionQuery"},{"location":"alfred/fm/query/completion_query/#signature","text":"class CompletionQuery ( Query ): def __init__ ( self , prompt : Union [ str , np . ndarray , List , Tuple , torch . Tensor ]): ...","title":"Signature"},{"location":"alfred/fm/query/completion_query/#completionqueryadd","text":"Show source in completion_query.py:61 concatenates the two queries","title":"CompletionQuery().add"},{"location":"alfred/fm/query/completion_query/#signature_1","text":"def __add__ ( self , other ): ...","title":"Signature"},{"location":"alfred/fm/query/completion_query/#completionqueryeq","text":"Show source in completion_query.py:49 returns whether the two queries are equal","title":"CompletionQuery().eq"},{"location":"alfred/fm/query/completion_query/#signature_2","text":"def __eq__ ( self , other ): ...","title":"Signature"},{"location":"alfred/fm/query/completion_query/#completionqueryhash","text":"Show source in completion_query.py:53 returns the hash of the query","title":"CompletionQuery().hash"},{"location":"alfred/fm/query/completion_query/#signature_3","text":"def __hash__ ( self ): ...","title":"Signature"},{"location":"alfred/fm/query/completion_query/#completionquerylen","text":"Show source in completion_query.py:57 returns the length of the prompt","title":"CompletionQuery().len"},{"location":"alfred/fm/query/completion_query/#signature_4","text":"def __len__ ( self ): ...","title":"Signature"},{"location":"alfred/fm/query/completion_query/#completionqueryrepr","text":"Show source in completion_query.py:41 returns the string representation of the query","title":"CompletionQuery().repr"},{"location":"alfred/fm/query/completion_query/#signature_5","text":"def __repr__ ( self ): ...","title":"Signature"},{"location":"alfred/fm/query/completion_query/#completionquerystr","text":"Show source in completion_query.py:45 returns the string representation of the query","title":"CompletionQuery().str"},{"location":"alfred/fm/query/completion_query/#signature_6","text":"def __str__ ( self ): ...","title":"Signature"},{"location":"alfred/fm/query/completion_query/#completionqueryload","text":"Show source in completion_query.py:37 loads the prompt, this will be convenient for batching the queries","title":"CompletionQuery().load"},{"location":"alfred/fm/query/completion_query/#signature_7","text":"def load ( self ): ...","title":"Signature"},{"location":"alfred/fm/query/completion_query/#completionqueryprompt","text":"Show source in completion_query.py:32 returns the raw prompt content","title":"CompletionQuery().prompt"},{"location":"alfred/fm/query/completion_query/#signature_8","text":"@property def prompt ( self ): ...","title":"Signature"},{"location":"alfred/fm/query/query/","text":"Query alfred Index / Alfred / Fm / Query / Query Auto-generated documentation for alfred.fm.query.query module. Query Query Query.compose Query().load Query().serialize Query Show source in query.py:7 Abstract base class for a single query for foundation model interfaces Signature class Query ( abc . ABC ): ... Query.compose Show source in query.py:12 Compose two strings or lists or tensors or numpy arrays Arguments a - operand a b - operand b Returns composition of a and b Signature @staticmethod def compose ( a , b , strategy = None ): ... Query().load Show source in query.py:46 Signature @abc . abstractmethod def load ( self ): ... Query().serialize Show source in query.py:37 Serialize query Returns serialized query Type: str Signature def serialize ( self ) -> str : ...","title":"Query"},{"location":"alfred/fm/query/query/#query","text":"alfred Index / Alfred / Fm / Query / Query Auto-generated documentation for alfred.fm.query.query module. Query Query Query.compose Query().load Query().serialize","title":"Query"},{"location":"alfred/fm/query/query/#query_1","text":"Show source in query.py:7 Abstract base class for a single query for foundation model interfaces","title":"Query"},{"location":"alfred/fm/query/query/#signature","text":"class Query ( abc . ABC ): ...","title":"Signature"},{"location":"alfred/fm/query/query/#querycompose","text":"Show source in query.py:12 Compose two strings or lists or tensors or numpy arrays","title":"Query.compose"},{"location":"alfred/fm/query/query/#arguments","text":"a - operand a b - operand b","title":"Arguments"},{"location":"alfred/fm/query/query/#returns","text":"composition of a and b","title":"Returns"},{"location":"alfred/fm/query/query/#signature_1","text":"@staticmethod def compose ( a , b , strategy = None ): ...","title":"Signature"},{"location":"alfred/fm/query/query/#queryload","text":"Show source in query.py:46","title":"Query().load"},{"location":"alfred/fm/query/query/#signature_2","text":"@abc . abstractmethod def load ( self ): ...","title":"Signature"},{"location":"alfred/fm/query/query/#queryserialize","text":"Show source in query.py:37 Serialize query","title":"Query().serialize"},{"location":"alfred/fm/query/query/#returns_1","text":"serialized query Type: str","title":"Returns"},{"location":"alfred/fm/query/query/#signature_3","text":"def serialize ( self ) -> str : ...","title":"Signature"},{"location":"alfred/fm/query/ranked_query/","text":"RankedQuery alfred Index / Alfred / Fm / Query / RankedQuery Auto-generated documentation for alfred.fm.query.ranked_query module. RankedQuery RankedQuery RankedQuery(). add RankedQuery(). eq RankedQuery(). hash RankedQuery(). len RankedQuery(). repr RankedQuery(). str RankedQuery().candidates RankedQuery().get_answer_choices_str RankedQuery().load RankedQuery().prompt RankedQuery Show source in ranked_query.py:14 Ranked Query Class encompasses query terms that operate in scoring scheme with FM interfaces Examples >>> from alfred.fm.query import RankedQuery >>> query = RankedQuery ( \"What is the answer of 1+1?\" , candidates = [ \"2\" , \"1\" ]) Then you can call either alfred . client or alfred . fm to get the RankedResponse >>> from alfred.client import Client >>> client = Client () >>> response = client ( query ) or >>> from alfred.fm.x import XFM >>> fm = XFM () >>> response = fm ( query ) Signature class RankedQuery ( Query ): def __init__ ( self , prompt : Union [ str , np . ndarray , List , Tuple , torch . Tensor ], candidates : Union [ List , Tuple , np . ndarray , torch . Tensor ], ): ... RankedQuery(). add Show source in ranked_query.py:109 concatenates the two queries Signature def __add__ ( self , other ): ... RankedQuery(). eq Show source in ranked_query.py:95 returns whether the two queries are equal Signature def __eq__ ( self , other ): ... RankedQuery(). hash Show source in ranked_query.py:101 returns the hash of the query Signature def __hash__ ( self ): ... RankedQuery(). len Show source in ranked_query.py:105 returns the length of the query Signature def __len__ ( self ): ... RankedQuery(). repr Show source in ranked_query.py:87 returns the string representation of the query Signature def __repr__ ( self ): ... RankedQuery(). str Show source in ranked_query.py:91 returns the string representation of the query Signature def __str__ ( self ): ... RankedQuery().candidates Show source in ranked_query.py:54 returns the raw candidates content Signature @property def candidates ( self ): ... RankedQuery().get_answer_choices_str Show source in ranked_query.py:64 get the raw candidates as jinja strings (deliminated by '|||') Signature def get_answer_choices_str ( self ): ... RankedQuery().load Show source in ranked_query.py:68 Load prompt and candidates Arguments composition_fn - function to compose prompt and candidates :type composition_fn: Callable Returns composed prompt and candidates as a list of different prompt queries Type: List Signature def load ( self , composition_fn : Callable = None ) -> List : ... RankedQuery().prompt Show source in ranked_query.py:59 returns the raw prompt content Signature @property def prompt ( self ): ...","title":"RankedQuery"},{"location":"alfred/fm/query/ranked_query/#rankedquery","text":"alfred Index / Alfred / Fm / Query / RankedQuery Auto-generated documentation for alfred.fm.query.ranked_query module. RankedQuery RankedQuery RankedQuery(). add RankedQuery(). eq RankedQuery(). hash RankedQuery(). len RankedQuery(). repr RankedQuery(). str RankedQuery().candidates RankedQuery().get_answer_choices_str RankedQuery().load RankedQuery().prompt","title":"RankedQuery"},{"location":"alfred/fm/query/ranked_query/#rankedquery_1","text":"Show source in ranked_query.py:14 Ranked Query Class encompasses query terms that operate in scoring scheme with FM interfaces","title":"RankedQuery"},{"location":"alfred/fm/query/ranked_query/#examples","text":">>> from alfred.fm.query import RankedQuery >>> query = RankedQuery ( \"What is the answer of 1+1?\" , candidates = [ \"2\" , \"1\" ]) Then you can call either alfred . client or alfred . fm to get the RankedResponse >>> from alfred.client import Client >>> client = Client () >>> response = client ( query ) or >>> from alfred.fm.x import XFM >>> fm = XFM () >>> response = fm ( query )","title":"Examples"},{"location":"alfred/fm/query/ranked_query/#signature","text":"class RankedQuery ( Query ): def __init__ ( self , prompt : Union [ str , np . ndarray , List , Tuple , torch . Tensor ], candidates : Union [ List , Tuple , np . ndarray , torch . Tensor ], ): ...","title":"Signature"},{"location":"alfred/fm/query/ranked_query/#rankedqueryadd","text":"Show source in ranked_query.py:109 concatenates the two queries","title":"RankedQuery().add"},{"location":"alfred/fm/query/ranked_query/#signature_1","text":"def __add__ ( self , other ): ...","title":"Signature"},{"location":"alfred/fm/query/ranked_query/#rankedqueryeq","text":"Show source in ranked_query.py:95 returns whether the two queries are equal","title":"RankedQuery().eq"},{"location":"alfred/fm/query/ranked_query/#signature_2","text":"def __eq__ ( self , other ): ...","title":"Signature"},{"location":"alfred/fm/query/ranked_query/#rankedqueryhash","text":"Show source in ranked_query.py:101 returns the hash of the query","title":"RankedQuery().hash"},{"location":"alfred/fm/query/ranked_query/#signature_3","text":"def __hash__ ( self ): ...","title":"Signature"},{"location":"alfred/fm/query/ranked_query/#rankedquerylen","text":"Show source in ranked_query.py:105 returns the length of the query","title":"RankedQuery().len"},{"location":"alfred/fm/query/ranked_query/#signature_4","text":"def __len__ ( self ): ...","title":"Signature"},{"location":"alfred/fm/query/ranked_query/#rankedqueryrepr","text":"Show source in ranked_query.py:87 returns the string representation of the query","title":"RankedQuery().repr"},{"location":"alfred/fm/query/ranked_query/#signature_5","text":"def __repr__ ( self ): ...","title":"Signature"},{"location":"alfred/fm/query/ranked_query/#rankedquerystr","text":"Show source in ranked_query.py:91 returns the string representation of the query","title":"RankedQuery().str"},{"location":"alfred/fm/query/ranked_query/#signature_6","text":"def __str__ ( self ): ...","title":"Signature"},{"location":"alfred/fm/query/ranked_query/#rankedquerycandidates","text":"Show source in ranked_query.py:54 returns the raw candidates content","title":"RankedQuery().candidates"},{"location":"alfred/fm/query/ranked_query/#signature_7","text":"@property def candidates ( self ): ...","title":"Signature"},{"location":"alfred/fm/query/ranked_query/#rankedqueryget_answer_choices_str","text":"Show source in ranked_query.py:64 get the raw candidates as jinja strings (deliminated by '|||')","title":"RankedQuery().get_answer_choices_str"},{"location":"alfred/fm/query/ranked_query/#signature_8","text":"def get_answer_choices_str ( self ): ...","title":"Signature"},{"location":"alfred/fm/query/ranked_query/#rankedqueryload","text":"Show source in ranked_query.py:68 Load prompt and candidates","title":"RankedQuery().load"},{"location":"alfred/fm/query/ranked_query/#arguments","text":"composition_fn - function to compose prompt and candidates :type composition_fn: Callable","title":"Arguments"},{"location":"alfred/fm/query/ranked_query/#returns","text":"composed prompt and candidates as a list of different prompt queries Type: List","title":"Returns"},{"location":"alfred/fm/query/ranked_query/#signature_9","text":"def load ( self , composition_fn : Callable = None ) -> List : ...","title":"Signature"},{"location":"alfred/fm/query/ranked_query/#rankedqueryprompt","text":"Show source in ranked_query.py:59 returns the raw prompt content","title":"RankedQuery().prompt"},{"location":"alfred/fm/query/ranked_query/#signature_10","text":"@property def prompt ( self ): ...","title":"Signature"},{"location":"alfred/fm/remote/","text":"Remote alfred Index / Alfred / Fm / Remote Auto-generated documentation for alfred.fm.remote module. Remote Modules Modules Grpc Protos Utils","title":"Remote"},{"location":"alfred/fm/remote/#remote","text":"alfred Index / Alfred / Fm / Remote Auto-generated documentation for alfred.fm.remote module. Remote Modules","title":"Remote"},{"location":"alfred/fm/remote/#modules","text":"Grpc Protos Utils","title":"Modules"},{"location":"alfred/fm/remote/grpc/","text":"Grpc alfred Index / Alfred / Fm / Remote / Grpc Auto-generated documentation for alfred.fm.remote.grpc module. Grpc gRPCClient gRPCClient().run gRPCClient().run_dataset gRPCServer gRPCServer().DataHeader gRPCServer().DataReady gRPCServer().Inference gRPCServer().close gRPCServer.port_finder gRPCServer().restart gRPCClient Show source in grpc.py:19 Signature class gRPCClient : def __init__ ( self , host : str , port : int , credentials : Optional [ Union [ grpc . ChannelCredentials , str ]] = None , ): ... gRPCClient().run Show source in grpc.py:53 Signature def run ( self , msg : Union [ str , Query , Tuple [ str , str ]], ** kwargs ): ... gRPCClient().run_dataset Show source in grpc.py:77 Signature def run_dataset ( self , dataset : Union [ Iterable [ Query ], Iterable [ str ], Iterable [ Tuple [ str , str ]]], ** kwargs ): ... gRPCServer Show source in grpc.py:119 Manages connections with gRPCClient Signature class gRPCServer ( query_pb2_grpc . QueryServiceServicer ): def __init__ ( self , model , port : int = 10719 , credentials : Optional [ grpc . ServerCredentials ] = None , ): ... gRPCServer().DataHeader Show source in grpc.py:240 Signature def DataHeader ( self , request , context ): ... gRPCServer().DataReady Show source in grpc.py:208 Signature def DataReady ( self , request , context ): ... gRPCServer().Inference Show source in grpc.py:169 Signature def Inference ( self , request , context ): ... gRPCServer().close Show source in grpc.py:246 Signature def close ( self ): ... gRPCServer.port_finder Show source in grpc.py:124 Finds the next available port if given port is not available Signature @staticmethod def port_finder ( port : int ) -> int : ... gRPCServer().restart Show source in grpc.py:249 Signature def restart ( self ): ...","title":"Grpc"},{"location":"alfred/fm/remote/grpc/#grpc","text":"alfred Index / Alfred / Fm / Remote / Grpc Auto-generated documentation for alfred.fm.remote.grpc module. Grpc gRPCClient gRPCClient().run gRPCClient().run_dataset gRPCServer gRPCServer().DataHeader gRPCServer().DataReady gRPCServer().Inference gRPCServer().close gRPCServer.port_finder gRPCServer().restart","title":"Grpc"},{"location":"alfred/fm/remote/grpc/#grpcclient","text":"Show source in grpc.py:19","title":"gRPCClient"},{"location":"alfred/fm/remote/grpc/#signature","text":"class gRPCClient : def __init__ ( self , host : str , port : int , credentials : Optional [ Union [ grpc . ChannelCredentials , str ]] = None , ): ...","title":"Signature"},{"location":"alfred/fm/remote/grpc/#grpcclientrun","text":"Show source in grpc.py:53","title":"gRPCClient().run"},{"location":"alfred/fm/remote/grpc/#signature_1","text":"def run ( self , msg : Union [ str , Query , Tuple [ str , str ]], ** kwargs ): ...","title":"Signature"},{"location":"alfred/fm/remote/grpc/#grpcclientrun_dataset","text":"Show source in grpc.py:77","title":"gRPCClient().run_dataset"},{"location":"alfred/fm/remote/grpc/#signature_2","text":"def run_dataset ( self , dataset : Union [ Iterable [ Query ], Iterable [ str ], Iterable [ Tuple [ str , str ]]], ** kwargs ): ...","title":"Signature"},{"location":"alfred/fm/remote/grpc/#grpcserver","text":"Show source in grpc.py:119 Manages connections with gRPCClient","title":"gRPCServer"},{"location":"alfred/fm/remote/grpc/#signature_3","text":"class gRPCServer ( query_pb2_grpc . QueryServiceServicer ): def __init__ ( self , model , port : int = 10719 , credentials : Optional [ grpc . ServerCredentials ] = None , ): ...","title":"Signature"},{"location":"alfred/fm/remote/grpc/#grpcserverdataheader","text":"Show source in grpc.py:240","title":"gRPCServer().DataHeader"},{"location":"alfred/fm/remote/grpc/#signature_4","text":"def DataHeader ( self , request , context ): ...","title":"Signature"},{"location":"alfred/fm/remote/grpc/#grpcserverdataready","text":"Show source in grpc.py:208","title":"gRPCServer().DataReady"},{"location":"alfred/fm/remote/grpc/#signature_5","text":"def DataReady ( self , request , context ): ...","title":"Signature"},{"location":"alfred/fm/remote/grpc/#grpcserverinference","text":"Show source in grpc.py:169","title":"gRPCServer().Inference"},{"location":"alfred/fm/remote/grpc/#signature_6","text":"def Inference ( self , request , context ): ...","title":"Signature"},{"location":"alfred/fm/remote/grpc/#grpcserverclose","text":"Show source in grpc.py:246","title":"gRPCServer().close"},{"location":"alfred/fm/remote/grpc/#signature_7","text":"def close ( self ): ...","title":"Signature"},{"location":"alfred/fm/remote/grpc/#grpcserverport_finder","text":"Show source in grpc.py:124 Finds the next available port if given port is not available","title":"gRPCServer.port_finder"},{"location":"alfred/fm/remote/grpc/#signature_8","text":"@staticmethod def port_finder ( port : int ) -> int : ...","title":"Signature"},{"location":"alfred/fm/remote/grpc/#grpcserverrestart","text":"Show source in grpc.py:249","title":"gRPCServer().restart"},{"location":"alfred/fm/remote/grpc/#signature_9","text":"def restart ( self ): ...","title":"Signature"},{"location":"alfred/fm/remote/utils/","text":"Utils alfred Index / Alfred / Fm / Remote / Utils Auto-generated documentation for alfred.fm.remote.utils module. Utils get_ip get_ip Show source in utils.py:4 Returns the Public IP address of the current machine. Arguments ipv4 - If True, returns the IPv4 address. If False, returns the IPv6 address. :type ipv4: bool Returns The Public IP address of the current machine. Type: str Signature def get_ip ( ipv4 = True ): ...","title":"Utils"},{"location":"alfred/fm/remote/utils/#utils","text":"alfred Index / Alfred / Fm / Remote / Utils Auto-generated documentation for alfred.fm.remote.utils module. Utils get_ip","title":"Utils"},{"location":"alfred/fm/remote/utils/#get_ip","text":"Show source in utils.py:4 Returns the Public IP address of the current machine.","title":"get_ip"},{"location":"alfred/fm/remote/utils/#arguments","text":"ipv4 - If True, returns the IPv4 address. If False, returns the IPv6 address. :type ipv4: bool","title":"Arguments"},{"location":"alfred/fm/remote/utils/#returns","text":"The Public IP address of the current machine. Type: str","title":"Returns"},{"location":"alfred/fm/remote/utils/#signature","text":"def get_ip ( ipv4 = True ): ...","title":"Signature"},{"location":"alfred/fm/remote/protos/","text":"Protos alfred Index / Alfred / Fm / Remote / Protos Auto-generated documentation for alfred.fm.remote.protos module. Protos Modules Modules Query Pb2 Query Pb2 Grpc","title":"Protos"},{"location":"alfred/fm/remote/protos/#protos","text":"alfred Index / Alfred / Fm / Remote / Protos Auto-generated documentation for alfred.fm.remote.protos module. Protos Modules","title":"Protos"},{"location":"alfred/fm/remote/protos/#modules","text":"Query Pb2 Query Pb2 Grpc","title":"Modules"},{"location":"alfred/fm/remote/protos/query_pb2/","text":"Query Pb2 alfred Index / Alfred / Fm / Remote / Protos / Query Pb2 Auto-generated documentation for alfred.fm.remote.protos.query_pb2 module. Query Pb2","title":"Query Pb2"},{"location":"alfred/fm/remote/protos/query_pb2/#query-pb2","text":"alfred Index / Alfred / Fm / Remote / Protos / Query Pb2 Auto-generated documentation for alfred.fm.remote.protos.query_pb2 module. Query Pb2","title":"Query Pb2"},{"location":"alfred/fm/remote/protos/query_pb2_grpc/","text":"Query Pb2 Grpc alfred Index / Alfred / Fm / Remote / Protos / Query Pb2 Grpc Auto-generated documentation for alfred.fm.remote.protos.query_pb2_grpc module. Query Pb2 Grpc QueryService QueryService.DataHeader QueryService.DataReady QueryService.Inference QueryServiceServicer QueryServiceServicer().DataHeader QueryServiceServicer().DataReady QueryServiceServicer().Inference QueryServiceStub add_QueryServiceServicer_to_server QueryService Show source in query_pb2_grpc.py:88 Missing associated documentation comment in .proto file. Signature class QueryService ( object ): ... QueryService.DataHeader Show source in query_pb2_grpc.py:143 Signature @staticmethod def DataHeader ( request , target , options = (), channel_credentials = None , call_credentials = None , insecure = False , compression = None , wait_for_ready = None , timeout = None , metadata = None , ): ... QueryService.DataReady Show source in query_pb2_grpc.py:117 Signature @staticmethod def DataReady ( request , target , options = (), channel_credentials = None , call_credentials = None , insecure = False , compression = None , wait_for_ready = None , timeout = None , metadata = None , ): ... QueryService.Inference Show source in query_pb2_grpc.py:91 Signature @staticmethod def Inference ( request , target , options = (), channel_credentials = None , call_credentials = None , insecure = False , compression = None , wait_for_ready = None , timeout = None , metadata = None , ): ... QueryServiceServicer Show source in query_pb2_grpc.py:40 Missing associated documentation comment in .proto file. Signature class QueryServiceServicer ( object ): ... QueryServiceServicer().DataHeader Show source in query_pb2_grpc.py:56 Missing associated documentation comment in .proto file. Signature def DataHeader ( self , request , context ): ... QueryServiceServicer().DataReady Show source in query_pb2_grpc.py:50 Missing associated documentation comment in .proto file. Signature def DataReady ( self , request , context ): ... QueryServiceServicer().Inference Show source in query_pb2_grpc.py:43 stream messages Signature def Inference ( self , request , context ): ... QueryServiceStub Show source in query_pb2_grpc.py:14 Missing associated documentation comment in .proto file. Signature class QueryServiceStub ( object ): def __init__ ( self , channel ): ... add_QueryServiceServicer_to_server Show source in query_pb2_grpc.py:63 Signature def add_QueryServiceServicer_to_server ( servicer , server ): ...","title":"Query Pb2 Grpc"},{"location":"alfred/fm/remote/protos/query_pb2_grpc/#query-pb2-grpc","text":"alfred Index / Alfred / Fm / Remote / Protos / Query Pb2 Grpc Auto-generated documentation for alfred.fm.remote.protos.query_pb2_grpc module. Query Pb2 Grpc QueryService QueryService.DataHeader QueryService.DataReady QueryService.Inference QueryServiceServicer QueryServiceServicer().DataHeader QueryServiceServicer().DataReady QueryServiceServicer().Inference QueryServiceStub add_QueryServiceServicer_to_server","title":"Query Pb2 Grpc"},{"location":"alfred/fm/remote/protos/query_pb2_grpc/#queryservice","text":"Show source in query_pb2_grpc.py:88 Missing associated documentation comment in .proto file.","title":"QueryService"},{"location":"alfred/fm/remote/protos/query_pb2_grpc/#signature","text":"class QueryService ( object ): ...","title":"Signature"},{"location":"alfred/fm/remote/protos/query_pb2_grpc/#queryservicedataheader","text":"Show source in query_pb2_grpc.py:143","title":"QueryService.DataHeader"},{"location":"alfred/fm/remote/protos/query_pb2_grpc/#signature_1","text":"@staticmethod def DataHeader ( request , target , options = (), channel_credentials = None , call_credentials = None , insecure = False , compression = None , wait_for_ready = None , timeout = None , metadata = None , ): ...","title":"Signature"},{"location":"alfred/fm/remote/protos/query_pb2_grpc/#queryservicedataready","text":"Show source in query_pb2_grpc.py:117","title":"QueryService.DataReady"},{"location":"alfred/fm/remote/protos/query_pb2_grpc/#signature_2","text":"@staticmethod def DataReady ( request , target , options = (), channel_credentials = None , call_credentials = None , insecure = False , compression = None , wait_for_ready = None , timeout = None , metadata = None , ): ...","title":"Signature"},{"location":"alfred/fm/remote/protos/query_pb2_grpc/#queryserviceinference","text":"Show source in query_pb2_grpc.py:91","title":"QueryService.Inference"},{"location":"alfred/fm/remote/protos/query_pb2_grpc/#signature_3","text":"@staticmethod def Inference ( request , target , options = (), channel_credentials = None , call_credentials = None , insecure = False , compression = None , wait_for_ready = None , timeout = None , metadata = None , ): ...","title":"Signature"},{"location":"alfred/fm/remote/protos/query_pb2_grpc/#queryserviceservicer","text":"Show source in query_pb2_grpc.py:40 Missing associated documentation comment in .proto file.","title":"QueryServiceServicer"},{"location":"alfred/fm/remote/protos/query_pb2_grpc/#signature_4","text":"class QueryServiceServicer ( object ): ...","title":"Signature"},{"location":"alfred/fm/remote/protos/query_pb2_grpc/#queryserviceservicerdataheader","text":"Show source in query_pb2_grpc.py:56 Missing associated documentation comment in .proto file.","title":"QueryServiceServicer().DataHeader"},{"location":"alfred/fm/remote/protos/query_pb2_grpc/#signature_5","text":"def DataHeader ( self , request , context ): ...","title":"Signature"},{"location":"alfred/fm/remote/protos/query_pb2_grpc/#queryserviceservicerdataready","text":"Show source in query_pb2_grpc.py:50 Missing associated documentation comment in .proto file.","title":"QueryServiceServicer().DataReady"},{"location":"alfred/fm/remote/protos/query_pb2_grpc/#signature_6","text":"def DataReady ( self , request , context ): ...","title":"Signature"},{"location":"alfred/fm/remote/protos/query_pb2_grpc/#queryserviceservicerinference","text":"Show source in query_pb2_grpc.py:43 stream messages","title":"QueryServiceServicer().Inference"},{"location":"alfred/fm/remote/protos/query_pb2_grpc/#signature_7","text":"def Inference ( self , request , context ): ...","title":"Signature"},{"location":"alfred/fm/remote/protos/query_pb2_grpc/#queryservicestub","text":"Show source in query_pb2_grpc.py:14 Missing associated documentation comment in .proto file.","title":"QueryServiceStub"},{"location":"alfred/fm/remote/protos/query_pb2_grpc/#signature_8","text":"class QueryServiceStub ( object ): def __init__ ( self , channel ): ...","title":"Signature"},{"location":"alfred/fm/remote/protos/query_pb2_grpc/#add_queryserviceservicer_to_server","text":"Show source in query_pb2_grpc.py:63","title":"add_QueryServiceServicer_to_server"},{"location":"alfred/fm/remote/protos/query_pb2_grpc/#signature_9","text":"def add_QueryServiceServicer_to_server ( servicer , server ): ...","title":"Signature"},{"location":"alfred/fm/response/","text":"Response alfred Index / Alfred / Fm / Response Auto-generated documentation for alfred.fm.response module. Response deserialize from_dict Modules deserialize Show source in init .py:22 Deserializes a JSON string into a Response object. Arguments json_str - The JSON string to deserialize. :type json_str: str Returns The Response object. Type: Response Signature def deserialize ( json_str : str ) -> Response : ... from_dict Show source in init .py:9 Converts a JSON dictionary to a Response object. Arguments json_dict - The JSON dictionary to convert. :type json_dict: dict Returns The Response object. Type: Responses Signature def from_dict ( json_dict : dict ) -> Response : ... Modules CompletionResponse RankedResponse Response","title":"Response"},{"location":"alfred/fm/response/#response","text":"alfred Index / Alfred / Fm / Response Auto-generated documentation for alfred.fm.response module. Response deserialize from_dict Modules","title":"Response"},{"location":"alfred/fm/response/#deserialize","text":"Show source in init .py:22 Deserializes a JSON string into a Response object.","title":"deserialize"},{"location":"alfred/fm/response/#arguments","text":"json_str - The JSON string to deserialize. :type json_str: str","title":"Arguments"},{"location":"alfred/fm/response/#returns","text":"The Response object. Type: Response","title":"Returns"},{"location":"alfred/fm/response/#signature","text":"def deserialize ( json_str : str ) -> Response : ...","title":"Signature"},{"location":"alfred/fm/response/#from_dict","text":"Show source in init .py:9 Converts a JSON dictionary to a Response object.","title":"from_dict"},{"location":"alfred/fm/response/#arguments_1","text":"json_dict - The JSON dictionary to convert. :type json_dict: dict","title":"Arguments"},{"location":"alfred/fm/response/#returns_1","text":"The Response object. Type: Responses","title":"Returns"},{"location":"alfred/fm/response/#signature_1","text":"def from_dict ( json_dict : dict ) -> Response : ...","title":"Signature"},{"location":"alfred/fm/response/#modules","text":"CompletionResponse RankedResponse Response","title":"Modules"},{"location":"alfred/fm/response/completion_response/","text":"CompletionResponse alfred Index / Alfred / Fm / Response / CompletionResponse Auto-generated documentation for alfred.fm.response.completion_response module. CompletionResponse CompletionResponse CompletionResponse(). eq CompletionResponse().prediction CompletionResponse().score CompletionResponse Show source in completion_response.py:9 A response class for language model completions. This class represents a completion response from a language model, which includes the predicted completion string, a score indicating the confidence of the prediction, and an optional embedding output. Signature class CompletionResponse ( Response ): def __init__ ( self , prediction : str , score : Optional [ float ] = None , embedding : Optional [ Union [ torch . Tensor , np . ndarray ]] = None , ): ... CompletionResponse(). eq Show source in completion_response.py:58 Determines if two CompletionResponse objects are equal. Two CompletionResponse objects are considered equal if their prediction, score, and embedding attributes are equal. If any of these attributes are not set, they are considered equal if both are None. Arguments other - The other CompletionResponse object to compare to. :type other: CompletionResponse Returns True if the two CompletionResponse objects are equal, False otherwise. Type: bool Signature def __eq__ ( self , other ): ... CompletionResponse().prediction Show source in completion_response.py:38 Returns the predicted completion string. Returns The predicted completion string. Type: str Signature @property def prediction ( self ) -> str : ... CompletionResponse().score Show source in completion_response.py:48 Returns the score of the completion prediction. Returns The score of the completion prediction. Type: float Signature @property def score ( self ) -> Dict : ...","title":"CompletionResponse"},{"location":"alfred/fm/response/completion_response/#completionresponse","text":"alfred Index / Alfred / Fm / Response / CompletionResponse Auto-generated documentation for alfred.fm.response.completion_response module. CompletionResponse CompletionResponse CompletionResponse(). eq CompletionResponse().prediction CompletionResponse().score","title":"CompletionResponse"},{"location":"alfred/fm/response/completion_response/#completionresponse_1","text":"Show source in completion_response.py:9 A response class for language model completions. This class represents a completion response from a language model, which includes the predicted completion string, a score indicating the confidence of the prediction, and an optional embedding output.","title":"CompletionResponse"},{"location":"alfred/fm/response/completion_response/#signature","text":"class CompletionResponse ( Response ): def __init__ ( self , prediction : str , score : Optional [ float ] = None , embedding : Optional [ Union [ torch . Tensor , np . ndarray ]] = None , ): ...","title":"Signature"},{"location":"alfred/fm/response/completion_response/#completionresponseeq","text":"Show source in completion_response.py:58 Determines if two CompletionResponse objects are equal. Two CompletionResponse objects are considered equal if their prediction, score, and embedding attributes are equal. If any of these attributes are not set, they are considered equal if both are None.","title":"CompletionResponse().eq"},{"location":"alfred/fm/response/completion_response/#arguments","text":"other - The other CompletionResponse object to compare to. :type other: CompletionResponse","title":"Arguments"},{"location":"alfred/fm/response/completion_response/#returns","text":"True if the two CompletionResponse objects are equal, False otherwise. Type: bool","title":"Returns"},{"location":"alfred/fm/response/completion_response/#signature_1","text":"def __eq__ ( self , other ): ...","title":"Signature"},{"location":"alfred/fm/response/completion_response/#completionresponseprediction","text":"Show source in completion_response.py:38 Returns the predicted completion string.","title":"CompletionResponse().prediction"},{"location":"alfred/fm/response/completion_response/#returns_1","text":"The predicted completion string. Type: str","title":"Returns"},{"location":"alfred/fm/response/completion_response/#signature_2","text":"@property def prediction ( self ) -> str : ...","title":"Signature"},{"location":"alfred/fm/response/completion_response/#completionresponsescore","text":"Show source in completion_response.py:48 Returns the score of the completion prediction.","title":"CompletionResponse().score"},{"location":"alfred/fm/response/completion_response/#returns_2","text":"The score of the completion prediction. Type: float","title":"Returns"},{"location":"alfred/fm/response/completion_response/#signature_3","text":"@property def score ( self ) -> Dict : ...","title":"Signature"},{"location":"alfred/fm/response/ranked_response/","text":"RankedResponse alfred Index / Alfred / Fm / Response / RankedResponse Auto-generated documentation for alfred.fm.response.ranked_response module. RankedResponse RankedResponse RankedResponse(). eq RankedResponse().logits RankedResponse().prediction RankedResponse().scores RankedResponse Show source in ranked_response.py:9 A subclass of Response that represents a language model response for scoring/ranking. Signature class RankedResponse ( Response ): def __init__ ( self , prediction : str , scores : Dict , logits : Optional [ Union [ torch . Tensor , np . ndarray ]] = None , embedding : Optional [ Union [ torch . Tensor , np . ndarray ]] = None , ): ... RankedResponse(). eq Show source in ranked_response.py:68 Determines if two RankedResponse objects are equal. Two RankedResponse objects are considered equal if their prediction, score, and embedding attributes are equal. If any of these attributes are not set, they are considered equal if both are None. Arguments other - The other RankedResponse object to compare to. :type other: RankedResponse Returns True if the two RankedResponse objects are equal, False otherwise. Type: bool Signature def __eq__ ( self , other ): ... RankedResponse().logits Show source in ranked_response.py:58 Get the raw logits output by the language model. Returns The logits output by the language model Type: Union[torch.Tensor, np.ndarray] Signature @property def logits ( self ) -> Union [ torch . Tensor , np . ndarray ]: ... RankedResponse().prediction Show source in ranked_response.py:38 Get the prediction made by the language model. Returns The prediction made by the language model Type: str Signature @property def prediction ( self ) -> str : ... RankedResponse().scores Show source in ranked_response.py:48 Get the scores for each candidates in the language model. Returns A dictionary of scores for each class in the language model Type: dict Signature @property def scores ( self ) -> Dict : ...","title":"RankedResponse"},{"location":"alfred/fm/response/ranked_response/#rankedresponse","text":"alfred Index / Alfred / Fm / Response / RankedResponse Auto-generated documentation for alfred.fm.response.ranked_response module. RankedResponse RankedResponse RankedResponse(). eq RankedResponse().logits RankedResponse().prediction RankedResponse().scores","title":"RankedResponse"},{"location":"alfred/fm/response/ranked_response/#rankedresponse_1","text":"Show source in ranked_response.py:9 A subclass of Response that represents a language model response for scoring/ranking.","title":"RankedResponse"},{"location":"alfred/fm/response/ranked_response/#signature","text":"class RankedResponse ( Response ): def __init__ ( self , prediction : str , scores : Dict , logits : Optional [ Union [ torch . Tensor , np . ndarray ]] = None , embedding : Optional [ Union [ torch . Tensor , np . ndarray ]] = None , ): ...","title":"Signature"},{"location":"alfred/fm/response/ranked_response/#rankedresponseeq","text":"Show source in ranked_response.py:68 Determines if two RankedResponse objects are equal. Two RankedResponse objects are considered equal if their prediction, score, and embedding attributes are equal. If any of these attributes are not set, they are considered equal if both are None.","title":"RankedResponse().eq"},{"location":"alfred/fm/response/ranked_response/#arguments","text":"other - The other RankedResponse object to compare to. :type other: RankedResponse","title":"Arguments"},{"location":"alfred/fm/response/ranked_response/#returns","text":"True if the two RankedResponse objects are equal, False otherwise. Type: bool","title":"Returns"},{"location":"alfred/fm/response/ranked_response/#signature_1","text":"def __eq__ ( self , other ): ...","title":"Signature"},{"location":"alfred/fm/response/ranked_response/#rankedresponselogits","text":"Show source in ranked_response.py:58 Get the raw logits output by the language model.","title":"RankedResponse().logits"},{"location":"alfred/fm/response/ranked_response/#returns_1","text":"The logits output by the language model Type: Union[torch.Tensor, np.ndarray]","title":"Returns"},{"location":"alfred/fm/response/ranked_response/#signature_2","text":"@property def logits ( self ) -> Union [ torch . Tensor , np . ndarray ]: ...","title":"Signature"},{"location":"alfred/fm/response/ranked_response/#rankedresponseprediction","text":"Show source in ranked_response.py:38 Get the prediction made by the language model.","title":"RankedResponse().prediction"},{"location":"alfred/fm/response/ranked_response/#returns_2","text":"The prediction made by the language model Type: str","title":"Returns"},{"location":"alfred/fm/response/ranked_response/#signature_3","text":"@property def prediction ( self ) -> str : ...","title":"Signature"},{"location":"alfred/fm/response/ranked_response/#rankedresponsescores","text":"Show source in ranked_response.py:48 Get the scores for each candidates in the language model.","title":"RankedResponse().scores"},{"location":"alfred/fm/response/ranked_response/#returns_3","text":"A dictionary of scores for each class in the language model Type: dict","title":"Returns"},{"location":"alfred/fm/response/ranked_response/#signature_4","text":"@property def scores ( self ) -> Dict : ...","title":"Signature"},{"location":"alfred/fm/response/response/","text":"Response alfred Index / Alfred / Fm / Response / Response Auto-generated documentation for alfred.fm.response.response module. Response Response Response(). repr Response(). str Response().prediction Response().serialize Response Show source in response.py:6 A class that represents a response from a alfred.fm model. Inherit from OrderedDict. Inherited by CompletionResponse and RankedResponse. Signature class Response ( OrderedDict ): ... Response(). repr Show source in response.py:43 Get a string representation of the response object. Returns A string representation of the response Type: str Signature def __repr__ ( self ): ... Response(). str Show source in response.py:30 Get a string representation of the response. Returns A string representation of the response Type: str Signature def __str__ ( self ): ... Response().prediction Show source in response.py:12 Get the prediction made by the model. Returns The prediction made by the model Signature @abc . abstractmethod def prediction ( self ): ... Response().serialize Show source in response.py:21 Serialize the response to a JSON string. Returns The serialized response as a JSON string Type: str Signature def serialize ( self ) -> str : ...","title":"Response"},{"location":"alfred/fm/response/response/#response","text":"alfred Index / Alfred / Fm / Response / Response Auto-generated documentation for alfred.fm.response.response module. Response Response Response(). repr Response(). str Response().prediction Response().serialize","title":"Response"},{"location":"alfred/fm/response/response/#response_1","text":"Show source in response.py:6 A class that represents a response from a alfred.fm model. Inherit from OrderedDict. Inherited by CompletionResponse and RankedResponse.","title":"Response"},{"location":"alfred/fm/response/response/#signature","text":"class Response ( OrderedDict ): ...","title":"Signature"},{"location":"alfred/fm/response/response/#responserepr","text":"Show source in response.py:43 Get a string representation of the response object.","title":"Response().repr"},{"location":"alfred/fm/response/response/#returns","text":"A string representation of the response Type: str","title":"Returns"},{"location":"alfred/fm/response/response/#signature_1","text":"def __repr__ ( self ): ...","title":"Signature"},{"location":"alfred/fm/response/response/#responsestr","text":"Show source in response.py:30 Get a string representation of the response.","title":"Response().str"},{"location":"alfred/fm/response/response/#returns_1","text":"A string representation of the response Type: str","title":"Returns"},{"location":"alfred/fm/response/response/#signature_2","text":"def __str__ ( self ): ...","title":"Signature"},{"location":"alfred/fm/response/response/#responseprediction","text":"Show source in response.py:12 Get the prediction made by the model.","title":"Response().prediction"},{"location":"alfred/fm/response/response/#returns_2","text":"The prediction made by the model","title":"Returns"},{"location":"alfred/fm/response/response/#signature_3","text":"@abc . abstractmethod def prediction ( self ): ...","title":"Signature"},{"location":"alfred/fm/response/response/#responseserialize","text":"Show source in response.py:21 Serialize the response to a JSON string.","title":"Response().serialize"},{"location":"alfred/fm/response/response/#returns_3","text":"The serialized response as a JSON string Type: str","title":"Returns"},{"location":"alfred/fm/response/response/#signature_4","text":"def serialize ( self ) -> str : ...","title":"Signature"},{"location":"alfred/template/","text":"Template alfred Index / Alfred / Template Auto-generated documentation for alfred.template module. Template Modules Modules StringTemplate Template","title":"Template"},{"location":"alfred/template/#template","text":"alfred Index / Alfred / Template Auto-generated documentation for alfred.template module. Template Modules","title":"Template"},{"location":"alfred/template/#modules","text":"StringTemplate Template","title":"Modules"},{"location":"alfred/template/string_template/","text":"StringTemplate alfred Index / Alfred / Template / StringTemplate Auto-generated documentation for alfred.template.string_template module. StringTemplate StringTemplate StringTemplate(). call StringTemplate().apply StringTemplate().apply_to_dataset StringTemplate().deserialize StringTemplate().get_answer_choices_list StringTemplate().id StringTemplate().metadata StringTemplate().name StringTemplate().reference StringTemplate().serialize StringTemplate().template StringTemplate().type StringTemplate().vote StringTemplate Show source in string_template.py:16 Prompt Template Class for Common Static Templates The class handles ranked scoring and completion queries for static templates. .. note On partial label integration : Partial Label vote is implicitly integrated in the template . Users will need to specify the label maps for the partial label group numbers . e . g . Rule : Predict \"stripe\" attributes for labels [ zebra , tigers ] . Label Numerical : { \"zebra\" : 1 , \"tiger\" : 2 , \"horse\" : 3 } Prompt : \"Does the [animal] have stripes?\" answer_choices : \"yes|||no\" labels_map : { \"yes\" : 2 , \"no\" : 1 } The partial label partition would be : [[ 3 ], [ 1 , 2 ]] Methods apply - apply template to an example and returns a query object vote - vote for the responses based on the matching function and the label maps update_template - update template Properties: - template - template - type - type of the template - id - id of the template - name - name of the template - reference - reference - metadata - metadata Signature class StringTemplate ( Template ): def __init__ ( self , template : str , id : Optional [ str ] = None , name : Optional [ str ] = None , reference : Optional [ str ] = None , metadata : Optional [ Dict [ str , Any ]] = None , answer_choices : Optional [ str ] = None , label_maps : Optional [ Dict ] = None , matching_fn : Optional [ Callable ] = lambda x , y ,: x == y , ): ... See also Template StringTemplate(). call Show source in string_template.py:327 A wrapper function to apply the template to a single example Arguments example - a single example in format of a dictionary :type example: Dict kawrgs - Additional arguments to pass to apply :type kawrgs: Any Returns a query object Type: Query Signature def __call__ ( self , example : Dict , ** kawrgs : Any ) -> Query : ... StringTemplate().apply Show source in string_template.py:112 Apply template to an example and returns a query object Arguments example - an example in format of dictionary :type example: Dict kawrgs - \"key_translator\" for key translation (e.g. for fields key replacements) :type kawrgs: Dict Returns query object (either CompletionQuery or RankedQuery depending on the template type) Type: Query Signature def apply ( self , example : Dict , ** kawrgs ) -> Query : ... StringTemplate().apply_to_dataset Show source in string_template.py:174 A wrapper function to apply the template to a dataset iteratively Arguments dataset - a dataset in format of a iterable of dictionary :type dataset: Iterable[Dict] kwargs - Additional arguments to pass to apply :type kwargs: Any Returns an iterable of query objects Type: Iterable[Query] Signature def apply_to_dataset ( self , dataset : Iterable [ Dict ], ** kwargs : Any ) -> Iterable [ Query ]: ... StringTemplate().deserialize Show source in string_template.py:308 returns a template object from a json string of dictionary Arguments json_str - json string of dictionary to deserialize a string template :type json_str: str Returns template object Signature def deserialize ( self , json_str : str ) -> Template : ... See also Template StringTemplate().get_answer_choices_list Show source in string_template.py:256 Get answer choices list Returns answer choices list Type: List Signature def get_answer_choices_list ( self ) -> List [ str ]: ... StringTemplate().id Show source in string_template.py:273 returns the template id Signature def id ( self ): ... StringTemplate().metadata Show source in string_template.py:285 returns the template metadata Signature def metadata ( self ): ... StringTemplate().name Show source in string_template.py:277 returns the template name Signature def name ( self ): ... StringTemplate().reference Show source in string_template.py:281 returns the template reference Signature def reference ( self ): ... StringTemplate().serialize Show source in string_template.py:289 returns the template as a json string of dictionary Returns json string of dictionary Type: str Signature def serialize ( self ): ... StringTemplate().template Show source in string_template.py:265 returns the template Signature def template ( self ): ... StringTemplate().type Show source in string_template.py:269 returns the template type Signature def type ( self ): ... StringTemplate().vote Show source in string_template.py:190 Vote for the responses based on the matching function and the label maps NOTE : if label maps contains numerical labels then the vote will be the exact specified value if not the vote will be the index + 1 of the matched answer choice Abstention vote is 0 NOTE on partial labels: Arguments responses - list of response objects :type responses: Union[Iterable[str], str, Iterable[Response], Response] matching_function - (optional) function to match responses against answer choices, defaulting to exact match e.g. lambda x, y: x == y :type matching_function: Callable label_maps - (optional) label maps that maps responses content to labels label_maps specified here will overide the label_maps initialized in the template :type label_maps: Dict Returns numpy ndarray of votes in np.int8 Type: np.ndarray Signature def vote ( self , responses : Union [ Iterable [ str ], str , Iterable [ Response ], Response ], matching_function : Callable = lambda x , y ,: x == y , label_maps : Optional [ Dict ] = None , ** kwargs : Any ) -> np . ndarray : ...","title":"StringTemplate"},{"location":"alfred/template/string_template/#stringtemplate","text":"alfred Index / Alfred / Template / StringTemplate Auto-generated documentation for alfred.template.string_template module. StringTemplate StringTemplate StringTemplate(). call StringTemplate().apply StringTemplate().apply_to_dataset StringTemplate().deserialize StringTemplate().get_answer_choices_list StringTemplate().id StringTemplate().metadata StringTemplate().name StringTemplate().reference StringTemplate().serialize StringTemplate().template StringTemplate().type StringTemplate().vote","title":"StringTemplate"},{"location":"alfred/template/string_template/#stringtemplate_1","text":"Show source in string_template.py:16 Prompt Template Class for Common Static Templates The class handles ranked scoring and completion queries for static templates. .. note On partial label integration : Partial Label vote is implicitly integrated in the template . Users will need to specify the label maps for the partial label group numbers . e . g . Rule : Predict \"stripe\" attributes for labels [ zebra , tigers ] . Label Numerical : { \"zebra\" : 1 , \"tiger\" : 2 , \"horse\" : 3 } Prompt : \"Does the [animal] have stripes?\" answer_choices : \"yes|||no\" labels_map : { \"yes\" : 2 , \"no\" : 1 } The partial label partition would be : [[ 3 ], [ 1 , 2 ]]","title":"StringTemplate"},{"location":"alfred/template/string_template/#methods","text":"apply - apply template to an example and returns a query object vote - vote for the responses based on the matching function and the label maps update_template - update template Properties: - template - template - type - type of the template - id - id of the template - name - name of the template - reference - reference - metadata - metadata","title":"Methods"},{"location":"alfred/template/string_template/#signature","text":"class StringTemplate ( Template ): def __init__ ( self , template : str , id : Optional [ str ] = None , name : Optional [ str ] = None , reference : Optional [ str ] = None , metadata : Optional [ Dict [ str , Any ]] = None , answer_choices : Optional [ str ] = None , label_maps : Optional [ Dict ] = None , matching_fn : Optional [ Callable ] = lambda x , y ,: x == y , ): ...","title":"Signature"},{"location":"alfred/template/string_template/#see-also","text":"Template","title":"See also"},{"location":"alfred/template/string_template/#stringtemplatecall","text":"Show source in string_template.py:327 A wrapper function to apply the template to a single example","title":"StringTemplate().call"},{"location":"alfred/template/string_template/#arguments","text":"example - a single example in format of a dictionary :type example: Dict kawrgs - Additional arguments to pass to apply :type kawrgs: Any","title":"Arguments"},{"location":"alfred/template/string_template/#returns","text":"a query object Type: Query","title":"Returns"},{"location":"alfred/template/string_template/#signature_1","text":"def __call__ ( self , example : Dict , ** kawrgs : Any ) -> Query : ...","title":"Signature"},{"location":"alfred/template/string_template/#stringtemplateapply","text":"Show source in string_template.py:112 Apply template to an example and returns a query object","title":"StringTemplate().apply"},{"location":"alfred/template/string_template/#arguments_1","text":"example - an example in format of dictionary :type example: Dict kawrgs - \"key_translator\" for key translation (e.g. for fields key replacements) :type kawrgs: Dict","title":"Arguments"},{"location":"alfred/template/string_template/#returns_1","text":"query object (either CompletionQuery or RankedQuery depending on the template type) Type: Query","title":"Returns"},{"location":"alfred/template/string_template/#signature_2","text":"def apply ( self , example : Dict , ** kawrgs ) -> Query : ...","title":"Signature"},{"location":"alfred/template/string_template/#stringtemplateapply_to_dataset","text":"Show source in string_template.py:174 A wrapper function to apply the template to a dataset iteratively","title":"StringTemplate().apply_to_dataset"},{"location":"alfred/template/string_template/#arguments_2","text":"dataset - a dataset in format of a iterable of dictionary :type dataset: Iterable[Dict] kwargs - Additional arguments to pass to apply :type kwargs: Any","title":"Arguments"},{"location":"alfred/template/string_template/#returns_2","text":"an iterable of query objects Type: Iterable[Query]","title":"Returns"},{"location":"alfred/template/string_template/#signature_3","text":"def apply_to_dataset ( self , dataset : Iterable [ Dict ], ** kwargs : Any ) -> Iterable [ Query ]: ...","title":"Signature"},{"location":"alfred/template/string_template/#stringtemplatedeserialize","text":"Show source in string_template.py:308 returns a template object from a json string of dictionary","title":"StringTemplate().deserialize"},{"location":"alfred/template/string_template/#arguments_3","text":"json_str - json string of dictionary to deserialize a string template :type json_str: str","title":"Arguments"},{"location":"alfred/template/string_template/#returns_3","text":"template object","title":"Returns"},{"location":"alfred/template/string_template/#signature_4","text":"def deserialize ( self , json_str : str ) -> Template : ...","title":"Signature"},{"location":"alfred/template/string_template/#see-also_1","text":"Template","title":"See also"},{"location":"alfred/template/string_template/#stringtemplateget_answer_choices_list","text":"Show source in string_template.py:256 Get answer choices list","title":"StringTemplate().get_answer_choices_list"},{"location":"alfred/template/string_template/#returns_4","text":"answer choices list Type: List","title":"Returns"},{"location":"alfred/template/string_template/#signature_5","text":"def get_answer_choices_list ( self ) -> List [ str ]: ...","title":"Signature"},{"location":"alfred/template/string_template/#stringtemplateid","text":"Show source in string_template.py:273 returns the template id","title":"StringTemplate().id"},{"location":"alfred/template/string_template/#signature_6","text":"def id ( self ): ...","title":"Signature"},{"location":"alfred/template/string_template/#stringtemplatemetadata","text":"Show source in string_template.py:285 returns the template metadata","title":"StringTemplate().metadata"},{"location":"alfred/template/string_template/#signature_7","text":"def metadata ( self ): ...","title":"Signature"},{"location":"alfred/template/string_template/#stringtemplatename","text":"Show source in string_template.py:277 returns the template name","title":"StringTemplate().name"},{"location":"alfred/template/string_template/#signature_8","text":"def name ( self ): ...","title":"Signature"},{"location":"alfred/template/string_template/#stringtemplatereference","text":"Show source in string_template.py:281 returns the template reference","title":"StringTemplate().reference"},{"location":"alfred/template/string_template/#signature_9","text":"def reference ( self ): ...","title":"Signature"},{"location":"alfred/template/string_template/#stringtemplateserialize","text":"Show source in string_template.py:289 returns the template as a json string of dictionary","title":"StringTemplate().serialize"},{"location":"alfred/template/string_template/#returns_5","text":"json string of dictionary Type: str","title":"Returns"},{"location":"alfred/template/string_template/#signature_10","text":"def serialize ( self ): ...","title":"Signature"},{"location":"alfred/template/string_template/#stringtemplatetemplate","text":"Show source in string_template.py:265 returns the template","title":"StringTemplate().template"},{"location":"alfred/template/string_template/#signature_11","text":"def template ( self ): ...","title":"Signature"},{"location":"alfred/template/string_template/#stringtemplatetype","text":"Show source in string_template.py:269 returns the template type","title":"StringTemplate().type"},{"location":"alfred/template/string_template/#signature_12","text":"def type ( self ): ...","title":"Signature"},{"location":"alfred/template/string_template/#stringtemplatevote","text":"Show source in string_template.py:190 Vote for the responses based on the matching function and the label maps NOTE : if label maps contains numerical labels then the vote will be the exact specified value if not the vote will be the index + 1 of the matched answer choice Abstention vote is 0 NOTE on partial labels:","title":"StringTemplate().vote"},{"location":"alfred/template/string_template/#arguments_4","text":"responses - list of response objects :type responses: Union[Iterable[str], str, Iterable[Response], Response] matching_function - (optional) function to match responses against answer choices, defaulting to exact match e.g. lambda x, y: x == y :type matching_function: Callable label_maps - (optional) label maps that maps responses content to labels label_maps specified here will overide the label_maps initialized in the template :type label_maps: Dict","title":"Arguments"},{"location":"alfred/template/string_template/#returns_6","text":"numpy ndarray of votes in np.int8 Type: np.ndarray","title":"Returns"},{"location":"alfred/template/string_template/#signature_13","text":"def vote ( self , responses : Union [ Iterable [ str ], str , Iterable [ Response ], Response ], matching_function : Callable = lambda x , y ,: x == y , label_maps : Optional [ Dict ] = None , ** kwargs : Any ) -> np . ndarray : ...","title":"Signature"},{"location":"alfred/template/template/","text":"Template alfred Index / Alfred / Template / Template Auto-generated documentation for alfred.template.template module. Template Template Template(). call Template().apply Template().deserialize Template().get_answer_choices_list Template().id Template().metadata Template().name Template().reference Template().serialize Template().template Template().type Template().vote Template Show source in template.py:7 Generic interface for prompt template The class mirros main functionality of promptsource's template Please see https://github.com/bigscience-workshop/promptsource for more details @misc{bach2022promptsource, title={PromptSource: An Integrated Development Environment and Repository for Natural Language Prompts}, author={Stephen H. Bach and Victor Sanh and Zheng-Xin Yong and Albert Webson and Colin Raffel and Nihal V. Nayak and Abheesht Sharma and Taewoon Kim and M Saiful Bari and Thibault Fevry and Zaid Alyafeai and Manan Dey and Andrea Santilli and Zhiqing Sun and Srulik Ben-David and Canwen Xu and Gunjan Chhablani and Han Wang and Jason Alan Fries and Maged S. Al-shaibani and Shanya Sharma and Urmish Thakker and Khalid Almubarak and Xiangru Tang and Xiangru Tang and Mike Tian-Jian Jiang and Alexander M. Rush}, year={2022}, eprint={2202.01279}, archivePrefix={arXiv}, primaryClass={cs.LG} } Signature class Template ( abc . ABC ): ... Template(). call Show source in template.py:100 returns the template applied to the example, this allows a functional style Signature def __call__ ( self , example ): ... Template().apply Show source in template.py:85 returns the template applied to the example Signature @abc . abstractmethod def apply ( self , example ): ... Template().deserialize Show source in template.py:95 returns the deserialized version of the template Signature @abc . abstractmethod def deserialize ( self , json_str ): ... Template().get_answer_choices_list Show source in template.py:80 returns the answer choices list of the template Signature @abc . abstractmethod def get_answer_choices_list ( self , example ): ... Template().id Show source in template.py:36 returns the id of the template Signature @property @abc . abstractmethod def id ( self ): ... Template().metadata Show source in template.py:54 returns the metadata of the template Signature @property @abc . abstractmethod def metadata ( self ): ... Template().name Show source in template.py:42 returns the name of the template Signature @property @abc . abstractmethod def name ( self ): ... Template().reference Show source in template.py:48 returns the reference of the template Signature @property @abc . abstractmethod def reference ( self ): ... Template().serialize Show source in template.py:90 returns the serialized version of the template Signature @abc . abstractmethod def serialize ( self ): ... Template().template Show source in template.py:24 returns the template string Signature @property @abc . abstractmethod def template ( self ): ... Template().type Show source in template.py:30 returns the type of the template Signature @property @abc . abstractmethod def type ( self ): ... Template().vote Show source in template.py:60 returns the vote of the template based on the responses with the label maps and matching function Arguments responses - the responses to be voted on :type responses: Union[Response, str] matching_function - the matching function to be used :type matching_function: Callable label_maps - (optional) the label maps to be used, this will overide the default label maps of the template if it is initialized with one :type label_maps: Dict Signature @abc . abstractmethod def vote ( self , responses : Union [ Response , str ], matching_function : Callable , label_maps : Optional [ Dict ] = None , ): ...","title":"Template"},{"location":"alfred/template/template/#template","text":"alfred Index / Alfred / Template / Template Auto-generated documentation for alfred.template.template module. Template Template Template(). call Template().apply Template().deserialize Template().get_answer_choices_list Template().id Template().metadata Template().name Template().reference Template().serialize Template().template Template().type Template().vote","title":"Template"},{"location":"alfred/template/template/#template_1","text":"Show source in template.py:7 Generic interface for prompt template The class mirros main functionality of promptsource's template Please see https://github.com/bigscience-workshop/promptsource for more details @misc{bach2022promptsource, title={PromptSource: An Integrated Development Environment and Repository for Natural Language Prompts}, author={Stephen H. Bach and Victor Sanh and Zheng-Xin Yong and Albert Webson and Colin Raffel and Nihal V. Nayak and Abheesht Sharma and Taewoon Kim and M Saiful Bari and Thibault Fevry and Zaid Alyafeai and Manan Dey and Andrea Santilli and Zhiqing Sun and Srulik Ben-David and Canwen Xu and Gunjan Chhablani and Han Wang and Jason Alan Fries and Maged S. Al-shaibani and Shanya Sharma and Urmish Thakker and Khalid Almubarak and Xiangru Tang and Xiangru Tang and Mike Tian-Jian Jiang and Alexander M. Rush}, year={2022}, eprint={2202.01279}, archivePrefix={arXiv}, primaryClass={cs.LG} }","title":"Template"},{"location":"alfred/template/template/#signature","text":"class Template ( abc . ABC ): ...","title":"Signature"},{"location":"alfred/template/template/#templatecall","text":"Show source in template.py:100 returns the template applied to the example, this allows a functional style","title":"Template().call"},{"location":"alfred/template/template/#signature_1","text":"def __call__ ( self , example ): ...","title":"Signature"},{"location":"alfred/template/template/#templateapply","text":"Show source in template.py:85 returns the template applied to the example","title":"Template().apply"},{"location":"alfred/template/template/#signature_2","text":"@abc . abstractmethod def apply ( self , example ): ...","title":"Signature"},{"location":"alfred/template/template/#templatedeserialize","text":"Show source in template.py:95 returns the deserialized version of the template","title":"Template().deserialize"},{"location":"alfred/template/template/#signature_3","text":"@abc . abstractmethod def deserialize ( self , json_str ): ...","title":"Signature"},{"location":"alfred/template/template/#templateget_answer_choices_list","text":"Show source in template.py:80 returns the answer choices list of the template","title":"Template().get_answer_choices_list"},{"location":"alfred/template/template/#signature_4","text":"@abc . abstractmethod def get_answer_choices_list ( self , example ): ...","title":"Signature"},{"location":"alfred/template/template/#templateid","text":"Show source in template.py:36 returns the id of the template","title":"Template().id"},{"location":"alfred/template/template/#signature_5","text":"@property @abc . abstractmethod def id ( self ): ...","title":"Signature"},{"location":"alfred/template/template/#templatemetadata","text":"Show source in template.py:54 returns the metadata of the template","title":"Template().metadata"},{"location":"alfred/template/template/#signature_6","text":"@property @abc . abstractmethod def metadata ( self ): ...","title":"Signature"},{"location":"alfred/template/template/#templatename","text":"Show source in template.py:42 returns the name of the template","title":"Template().name"},{"location":"alfred/template/template/#signature_7","text":"@property @abc . abstractmethod def name ( self ): ...","title":"Signature"},{"location":"alfred/template/template/#templatereference","text":"Show source in template.py:48 returns the reference of the template","title":"Template().reference"},{"location":"alfred/template/template/#signature_8","text":"@property @abc . abstractmethod def reference ( self ): ...","title":"Signature"},{"location":"alfred/template/template/#templateserialize","text":"Show source in template.py:90 returns the serialized version of the template","title":"Template().serialize"},{"location":"alfred/template/template/#signature_9","text":"@abc . abstractmethod def serialize ( self ): ...","title":"Signature"},{"location":"alfred/template/template/#templatetemplate","text":"Show source in template.py:24 returns the template string","title":"Template().template"},{"location":"alfred/template/template/#signature_10","text":"@property @abc . abstractmethod def template ( self ): ...","title":"Signature"},{"location":"alfred/template/template/#templatetype","text":"Show source in template.py:30 returns the type of the template","title":"Template().type"},{"location":"alfred/template/template/#signature_11","text":"@property @abc . abstractmethod def type ( self ): ...","title":"Signature"},{"location":"alfred/template/template/#templatevote","text":"Show source in template.py:60 returns the vote of the template based on the responses with the label maps and matching function","title":"Template().vote"},{"location":"alfred/template/template/#arguments","text":"responses - the responses to be voted on :type responses: Union[Response, str] matching_function - the matching function to be used :type matching_function: Callable label_maps - (optional) the label maps to be used, this will overide the default label maps of the template if it is initialized with one :type label_maps: Dict","title":"Arguments"},{"location":"alfred/template/template/#signature_12","text":"@abc . abstractmethod def vote ( self , responses : Union [ Response , str ], matching_function : Callable , label_maps : Optional [ Dict ] = None , ): ...","title":"Signature"}]}